// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT License.
// See the LICENSE file in the project root for more information.

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#var highestSupportedArity = 16;#>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;

namespace Reaqtive.Operators
{
<#
for (int i = 2; i <= highestSupportedArity; i++)
{
    // PARAMETERIZE TYPE SIGNATURE FOR `CombineLatest` -- produces something like `<T1, T2, TResult>`.

    string[] typeArr = new string[i];
    for (int j = 1; j <= i; j++)
    {
        typeArr[j-1] = "T" + j;
    }

    var typeParams = "<" + string.Join(", ", typeArr) + ", TResult>";
#>
    #region CombineLatest<#=i#>

    internal sealed class CombineLatest<#=typeParams#> : SubscribableBase<TResult>
    {
<#
    // MEMBER VARS FOR `CombineLatest
    for (int j = 1; j <= i; j++)
    {
#>
        private readonly ISubscribable<T<#=j#>> _source<#=j#>;
<#
    }
#>
        private readonly Func<#=typeParams#> _selector;
<#
    // CONSTRUCTOR PARAMS FOR `CombineLatest`
    string[] constructorArr = new string[i];
    for (int j = 1; j <= i; j++)
    {
        constructorArr[j-1] = "ISubscribable<T" + j + "> source" + j;
    }
    var constructorParams = "(" + string.Join(", ", constructorArr) + ", Func" + typeParams + " selector)";
#>

        public CombineLatest<#=constructorParams#>
        {
<#
    for (int j = 1; j <= i; j++)
    {
#>
            Debug.Assert(source<#=j#> != null);
<#
    }
#>
            Debug.Assert(selector != null);

<#
    for (int j = 1; j <= i; j++)
    {
#>
            _source<#=j#> = source<#=j#>;
<#
    }
#>
            _selector = selector;
        }

        protected override ISubscription SubscribeCore(IObserver<TResult> observer)
        {
            return new _(this, observer);
        }

        private sealed class _ : CombineLatestCommon<CombineLatest<#=typeParams#>, TResult>
        {
            private readonly CombineLatest<#=typeParams#> _parent;
<#
    for (int j = 1; j <= i; j++)
    {
#>
            private CombineLatestObserver<T<#=j#>> _observer<#=j#>;
<#
    }
#>

            public _(CombineLatest<#=typeParams#> parent, IObserver<TResult> observer)
                : base(<#=i#>, parent, observer)
            {
                _parent = parent;
            }

            protected override int Arity => <#=i#>;

            public override string Name => "rc:CombineLatest+<#=i#>";

            public override Version Version => Versioning.v1;

            protected override IEnumerable<ISubscription> OnSubscribe()
            {
<#
    for (int j = 1; j <= i; j++)
    {
#>
                _observer<#=j#> = new CombineLatestObserver<T<#=j#>>(this, <#=j-1#>);
                _observer<#=j#>.Subscription = Params._source<#=j#>.Subscribe(_observer<#=j#>);

<#
    }
#>
                return new InputSubscriptions(this);
            }

<#
    // PARAMETERS TO THE COMBINE FUNCTION
    string[] combineArr = new string[i];
    for (int j = 1; j <= i; j++)
    {
        combineArr[j-1] = "_observer" + j + ".LastValue";
    }
    var combineParams = string.Join(", ", combineArr);
#>
            protected override TResult GetResult() => _parent._selector(<#=combineParams#>);

            protected override void SaveStateCore(IOperatorStateWriter writer)
            {
                base.SaveStateCore(writer);

<#
    for (int j = 1; j <= i; j++)
    {
#>
                _observer<#=j#>.SaveState(writer);
<#
    }
#>
            }

            protected override void LoadStateCore(IOperatorStateReader reader)
            {
                base.LoadStateCore(reader);

<#
    for (int j = 1; j <= i; j++)
    {
#>
                _observer<#=j#>.LoadState(reader);
<#
    }
#>
            }

            private sealed class InputSubscriptions : IEnumerable<ISubscription>
            {
                private readonly _ _parent;

                public InputSubscriptions(_ parent) => _parent = parent;

                public IEnumerator<ISubscription> GetEnumerator() => new Enumerator(_parent);

                IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

                private sealed class Enumerator : IEnumerator<ISubscription>
                {
                    private readonly _ _parent;
                    private int _index = -1;

                    public Enumerator(_ parent) => _parent = parent;

                    public bool MoveNext()
                    {
                        if (_index < <#=i-1#>)
                        {
                            _index++;
                            return true;
                        }

                        _index = <#=i#>;
                        return false;
                    }

                    public ISubscription Current => _index switch
                    {
<#
    for (int j = 1; j <= i; j++)
    {
#>
                        <#=j-1#> => _parent._observer<#=j#>.Subscription,
<#
    }
#>
                        _ => null
                    };

                    object IEnumerator.Current => Current;

                    public void Reset() => _index = -1;

                    public void Dispose() { }
                }
            }
        }
    }

    #endregion

<#
}
#>
}
