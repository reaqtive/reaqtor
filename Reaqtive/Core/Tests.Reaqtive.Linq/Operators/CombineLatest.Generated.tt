// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT License.
// See the LICENSE file in the project root for more information.

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#var highestSupportedArity = 16;#>
using System;
using System.Collections;
using System.Linq;

using Reaqtive;
using Reaqtive.Disposables;
using Reaqtive.Testing;
using Reaqtive.TestingFramework;

using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Test.Nuqleon.Reactive.Operators
{
    public partial class CombineLatest
    {
        #region Argument checking

        [TestMethod]
        public void CombineLatest_ArgumentChecking_HighArity()
        {
            var xs = DummySubscribable<int>.Instance;
            var ns = default(ISubscribable<int>);

<#
for (var i = 2; i <= highestSupportedArity; i++)
{
    for (var j = 0; j < i; j++)
    {
        var args = string.Join(", ", Enumerable.Repeat("", i).Select((_, k) => k == j ? "ns" : "xs"));
        var fargs = Enumerable.Range(1, i).Select(k => "_" + k);
        var func = "(" + string.Join(", ", fargs) + ") => " + string.Join(" + ", fargs);
#>
            ReactiveAssert.Throws<ArgumentNullException>(() => Subscribable.CombineLatest(<#=args#>, <#=func#>));
<#
    }

    var xss = string.Join(", ", Enumerable.Repeat("xs", i));
    var ft = "Func<" + string.Join(", ", Enumerable.Repeat("int", i + 1)) + ">";
#>
            ReactiveAssert.Throws<ArgumentNullException>(() => Subscribable.CombineLatest(<#=xss#>, default(<#=ft#>)));
<#
}
#>
        }

        #endregion

        #region Checkpointing

<#
for (var i = 2; i <= highestSupportedArity; ++i) {
    var paramNames = new List<string>();
    var selectorParamNames = new List<string> { "p0" };
    for (var j = 1; j < i; ++j)
    {
        paramNames.Add(string.Format("io{0}", j));
        selectorParamNames.Add(string.Format("p{0}", j));
    }
    var selector = string.Format("({0}) => {1}", string.Join(", ", selectorParamNames), string.Join(" + ", selectorParamNames));
#>
        [TestMethod]
        public void CombineLatest_SaveAndReload_<#=i#>()
        {
            var state = _scheduler.CreateStateContainer();

            var checkpoints = new[] {
                OnSave(500, state),
                OnLoad(600, state),
            };

<#
for (var j = 0; j < i; ++j) {
    var comma = (j == i - 1 || j == i - 2) ? "," : "";
#>
            var io<#=j#> = _scheduler.CreateHotObservable(
                OnNext(210 + <#=(j*10)#>, 1)<#=comma#>
<#	if (j == i - 2) { #>
                OnNext(550, 10)
<#}#>
<#	if (j == i - 1) { #>
                OnNext(650, 2)
<#}#>
            );

<#}#>
            var res = _scheduler.Start(
                () => io0.CombineLatest(<#=string.Join(", ", paramNames)#>, <#=selector#>).Apply(_scheduler, checkpoints)
            );

            res.Messages.AssertEqual(
                OnNext(200 + <#=(i*10)#>, <#=i#>),
                OnNext(550, <#=(i-1+10)#>),
                OnNext(650, <#=i+1#>)
            );
        }

<#}#>
        #endregion
    }
}