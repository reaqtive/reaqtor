// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT License.
// See the LICENSE file in the project root for more information.

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;

using Reaqtive;
using Reaqtive.Testing;
using Reaqtive.TestingFramework;

using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Test.Reaqtive.Operators
{
	public partial class Max
	{
<#
var d = new Dictionary<Type, Tuple<IEnumerable, IEnumerable>>
{
	{ typeof(int), Tuple.Create<IEnumerable, IEnumerable>(new[] { 17, 25, 1999, -8, 2, 3, -5, -7, 36 }, new[] { 0, int.MinValue, int.MaxValue }) },
	{ typeof(long), Tuple.Create<IEnumerable, IEnumerable>(new[] { 17L, 25L, 1999L, -8L, 2L, 3L, -5L, -7L, 36L }, new[] { 0, long.MinValue, long.MaxValue }) },
	{ typeof(float), Tuple.Create<IEnumerable, IEnumerable>(new[] { 17.8f, 3.5f, 199.9f, -25.2f, -7.36f }, new[] { 0.0f, float.NegativeInfinity, float.PositiveInfinity, float.NaN }) },
	{ typeof(double), Tuple.Create<IEnumerable, IEnumerable>(new[] { 17.8, 3.5, 199.9, -25.2, -7.36 }, new[] { 0.0, double.NegativeInfinity, double.PositiveInfinity, double.NaN }) },
	{ typeof(decimal), Tuple.Create<IEnumerable, IEnumerable>(new[] { 24.95m, 19.99m, 1999m, -7m, 499.99m, 123m }, new[] { 0.0m }) },
};

var litsuf = new Dictionary<Type, string>
{
	{ typeof(int), "" },
	{ typeof(long), "L" },
	{ typeof(float), "f" },
	{ typeof(double), "d" },
	{ typeof(decimal), "m" },
};

foreach (var kv in d)
{
	var t = kv.Key;

	foreach (var nul in new[] { false, true })
	{
		var tn = nul ? "Nullable" + t.Name : t.Name;
		var tncs = nul ? t.Name + "?" : t.Name;

		var r = t;
		var rncs = nul ? r.Name + "?" : r.Name;

		var charm = kv.Value.Item1;
		var strange = kv.Value.Item2;

		var cast = typeof(Enumerable).GetMethod("Cast");

		var sets = (IEnumerable<Tuple<string, IEnumerable, Type>>)new[] { new Tuple<string, IEnumerable, Type>("", charm, t) };
		
		foreach (var set in sets)
		{
			var name = set.Item1;
			var seq = set.Item2;
			var type = set.Item3;

			var max = typeof(Enumerable).GetMethod("Max", new[] { typeof(IEnumerable<>).MakeGenericType(type) });

			var lst = seq.Cast<object>().ToList();
			lst.RemoveAt(2);
			var nums = (IEnumerable)cast.MakeGenericMethod(t).Invoke(null, new object[] { lst });

			var res = max.Invoke(null, new object[] { nums });

			var suf = litsuf[t];
			var def = "default(" + tncs + ")";

			var rsuf = litsuf[r];
			var rdef = "default(" + rncs + ")";

			var ress = res.ToString() + rsuf;

			var vals = seq.Cast<object>().Select((o, i) => new { Time = 200 + (i + 1) * 10, Value = o == null ? def : o.ToString() + suf }).ToList();
			var end = 200 + 10 * (vals.Count + 1);

			var m = name;

			if (r == typeof(float) || r == typeof(double))
			{
				ress = "max => Math.Abs((" + r.Name + ")(max - " + ress + ")) < 0.0001" + rsuf;
			}

#>
		[TestMethod]
		public void Max<#=tn#>_SaveAndReload()
		{
            var state = Scheduler.CreateStateContainer();

            var checkpoints = new[] {
                OnSave(225, state),
                OnLoad(235, state),
            };

			var xs = Scheduler.CreateHotObservable(
<#
var z = 0;
foreach (var val in vals)
{
	var comment = z == 2 ? " // Missing" : "";
#>
				OnNext<<#=tncs#>>(<#=val.Time#>, <#=val.Value#>),<#=comment#>
<#
	z++;
}
#>
				OnCompleted<<#=tncs#>>(<#=end#>)
			);

			var res = Scheduler.Start(() =>
				xs.Max().Apply(Scheduler, checkpoints)
			);

			res.Messages.AssertEqual(
				// state saved @225
                // state reloaded @235
				OnNext<<#=rncs#>>(<#=end#>, <#=ress#>),
				OnCompleted<<#=rncs#>>(<#=end#>)
			);
		}

<#
		}
	}
}
#>
	}
}
