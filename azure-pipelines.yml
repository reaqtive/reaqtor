trigger:
  branches:
    include:
      - main
      - rel/*

pr:
  branches:
    include:
    - main
    - rel/*

variables:      
  BuildPlatform: Any CPU
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

stages:
- stage: Build
  jobs:
  - template: azure-pipelines-build-jobs.yml
    parameters:
      name: Windows
      pool: vs2019-preview
      shouldPack: true

  - template: azure-pipelines-build-jobs.yml
    parameters:
      name: Linux
      pool: 
        vmImage: ubuntu-latest
  
  - job: Build_and_Pack
    pool: vs2019-preview

    steps:
    - task: UseDotNet@2
      displayName: Use .NET Core 5.x SDK
      inputs:
        version: 5.x
        performMultiLevelLookup: true

    - task: DotNetCoreCLI@2
      inputs:
        command: custom
        custom: tool
        arguments: install -g nbgv
      displayName: Install NBGV tool

    - script: nbgv cloud -a
      displayName: Set Version

    - task: DotNetCoreCLI@2
      inputs:
        command: restore
        projects: All.sln
        verbosityRestore: Minimal
        restoreArguments: /bl:$(Build.ArtifactStagingDirectory)/Logs/Pack.Restore.binlog
      displayName: Restore

    - task: DotNetCoreCLI@2
      inputs:
        command: build
        projects: |
          **/*.csproj
          !**/Tests.*.csproj
          !**/Perf.*.csproj
          !**/Reaqtor.Remoting.VersioningTests.csproj
        configuration: Release
        verbosity: Minimal        
        arguments: /p:CreatePackage=true /p:PackageOutputPath=$(Build.ArtifactStagingDirectory)/artifacts /bl:$(Build.ArtifactStagingDirectory)/Logs/Pack.binlog --no-restore
      displayName: Build and Pack

    - publish:  config
      artifact: config
      displayName: Publish signing config

    - script: del $(Build.ArtifactStagingDirectory)\artifacts\*.symbols.nupkg
      displayName: Remove redundant packages from upload

    - publish: $(Build.ArtifactStagingDirectory)/artifacts
      displayName: Publish artifacts
      artifact: BuildPackages

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)/Logs
        artifactName: Logs    
      displayName: Publish Build Logs      
      condition: always()      

- stage: CodeSign
  condition: and(succeeded('Build'), not(eq(variables['build.reason'], 'PullRequest')))
  jobs:
  - deployment: CodeSign
    displayName: Code Signing
    pool:
      vmImage: windows-latest
    environment: Code Sign
    variables:
    - group: SignClient Credentials
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DotNetCoreCLI@2
            inputs:
              command: custom
              custom: tool
              arguments: install --tool-path . SignClient
            displayName: Install SignTool tool

          - pwsh: |
              .\SignClient "Sign" `
              --baseDirectory "$(Pipeline.Workspace)\BuildPackages" `
              --input "**/*.nupkg" `
              --config "$(Pipeline.Workspace)\config\signclient.json" `
              --user "$(SignClientUser)" `
              --secret "$(SignClientSecret)" `
              --name "Reaqtive" `
              --description "Reaqtive" `
              --descriptionUrl "https://github.com/reaqtive/reaqtor"
            displayName: Sign packages
          - publish: $(Pipeline.Workspace)/BuildPackages
            displayName: Publish Signed Packages
            artifact: SignedPackages