trigger:
  branches:
    include:
      - main
      - rel/*

pr:
  branches:
    include:
    - main
    - rel/*

stages:
- stage: Build
  jobs:
  - job: Build
    pool: vs2019-preview
    
    strategy:
      matrix:
        Release:
          BuildConfiguration: Release
        Debug:
          BuildConfiguration: Debug

    variables:      
      BuildPlatform: Any CPU
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

    steps:
    - task: UseDotNet@2
      displayName: Use .NET Core 5.0.x SDK
      inputs:
        version: 5.0.x
        performMultiLevelLookup: true

    - task: DotNetCoreCLI@2
      inputs:
        command: custom
        custom: tool
        arguments: install --tool-path . nbgv
      displayName: Install NBGV tool

    - script: nbgv cloud -a
      displayName: Set Version

    - task: DotNetCoreCLI@2
      inputs:
        command: restore
        projects: All.sln
        verbosityRestore: Minimal
        arguments: /bl:$(Build.ArtifactStagingDirectory)/Logs/$(BuildConfiguration).Restore.binlog
      displayName: Restore

    - task: DotNetCoreCLI@2
      inputs:
        command: pack
        packagesToPack: '**/*.csproj;!**/Tests.*.csproj;!**/Perf.*.csproj'
        configuration: $(BuildConfiguration)
        packDirectory: $(Build.ArtifactStagingDirectory)/artifacts
        verbosityPack: Minimal
        arguments: /bl:$(Build.ArtifactStagingDirectory)/Logs/$(BuildConfiguration).Pack.binlog --no-restore
      displayName: Pack
      condition: and(succeeded(), eq(variables['BuildConfiguration'], 'Release')) # we only pack release; test will build what it needs

    - task: DotNetCoreCLI@2
      inputs:
        command: custom
        custom: tool
        arguments: install --tool-path . dotnet-reportgenerator-globaltool
      displayName: Install ReportGenerator tool

    - task: DotNetCoreCLI@2
      inputs:
        command: test
        projects: '**/Tests.*.csproj'
        arguments: -c $(BuildConfiguration) /bl:$(Build.ArtifactStagingDirectory)/Logs/$(BuildConfiguration).Test.binlog --settings coverlet.runsettings --collect:"XPlat Code Coverage" --no-restore
      displayName: Run Unit Tests
      continueOnError: true

    - script: reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"
      displayName: Create reports

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml

    - publish:  config
      artifact: config
      displayName: Publish signing config

    - publish: $(Build.ArtifactStagingDirectory)/artifacts
      displayName: Publish artifacts
      artifact: BuildPackages

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)/Logs
        artifactName: Logs    
      displayName: Publish Build Logs      
      condition: always()

- stage: CodeSign
  condition: and(succeeded('Build'), not(eq(variables['build.reason'], 'PullRequest')))
  jobs:
  - deployment: CodeSign
    displayName: Code Signing
    pool:
      vmImage: windows-latest
    environment: Code Sign
    variables:
    - group: SignClient Credentials
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DotNetCoreCLI@2
            inputs:
              command: custom
              custom: tool
              arguments: install --tool-path . SignClient
            displayName: Install SignTool tool

          - pwsh: |
              .\SignClient "Sign" `
              --baseDirectory "$(Pipeline.Workspace)\BuildPackages" `
              --input "**/*.nupkg" `
              --config "$(Pipeline.Workspace)\config\signclient.json" `
              --user "$(SignClientUser)" `
              --secret "$(SignClientSecret)" `
              --name "Reaqtive" `
              --description "Reaqtive" `
              --descriptionUrl "https://github.com/reaqtive/reaqtor"
            displayName: Sign packages
          - publish: $(Pipeline.Workspace)/BuildPackages
            displayName: Publish Signed Packages
            artifact: SignedPackages