trigger:
  branches:
    include:
      - main
      - rel/*

pr:
  branches:
    include:
    - main
    - rel/*

variables:
  BuildPlatform: Any CPU
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

stages:
- stage: Build
  jobs:
  - template: azure-pipelines-build-jobs.yml
    parameters:
      pools: [ { name: 'Windows', vmImage: 'windows-latest' }, { name: 'Linux', vmImage: 'ubuntu-latest' } ]
      projects: [ 'Nuqleon', 'Reaqtive', 'Reaqtor' ]
      configurations: [ 'Debug', 'Release' ]

  - job: Reaqtor_Glitching_Tests
    displayName: Run Reaqtor Remoting Glitching Tests
    pool:
      vmImage: windows-latest

    steps:
    - task: UseDotNet@2
      displayName: Use .NET Core 7.x SDK
      inputs:
        version: 7.x
        performMultiLevelLookup: true

    - powershell: |
        $existing = & dotnet tool list -g | Select-String "nbgv" 
        if (!$existing) {
            & dotnet tool install -g nbgv
        }
      displayName: Install NBGV tool

    - script: nbgv cloud -a
      displayName: Set Version

    - task: DotNetCoreCLI@2
      inputs:
        command: custom
        custom: tool
        arguments: install -g dotnet-reportgenerator-globaltool
      displayName: Install ReportGenerator tool

    - task: DotNetCoreCLI@2
      inputs:
        command: test
        workingDirectory: Reaqtor/Samples/Remoting/Tests.Reaqtor.Remoting.Glitching
        arguments: -c Release -p:EnableGlitching=true /bl:$(Build.ArtifactStagingDirectory)/Logs/Glitching.Test.binlog --settings $(Build.SourcesDirectory)/coverlet.runsettings --collect:"XPlat Code Coverage" --blame --blame-hang-timeout 5m
        testRunTitle: Reaqtor Glitching
      displayName: Run Unit Tests

    - script: reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -sourcedirs:$(Build.SourcesDirectory) -targetdir:$(Build.ArtifactStagingDirectory)/coverage/Glitching -reporttypes:"Cobertura"
      displayName: Consolidate Coverage Runs
      condition: succeededOrFailed()

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)/coverage
        artifactName: RawCoverage
        parallel: true
        parallelCount: 8
      displayName: Publish Raw Coverage Output
      condition: succeededOrFailed()

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)/Logs
        artifactName: Logs
        parallel: true
        parallelCount: 8
      displayName: Publish Build Logs
      condition: always()

  - job: Reaqtor_Dotnet_Format
    displayName: Run dotnet-format checks
    pool:
      vmImage: windows-latest

    steps:
    - task: UseDotNet@2
      displayName: Use .NET Core 7.x SDK
      inputs:
        version: 7.x
        performMultiLevelLookup: true

    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: All.sln
     
    - script: dotnet format --no-restore --verify-no-changes  --verbosity diagnostic All.sln
      displayName: Run dotnet-format

  - job: Build_and_Pack
    pool:
      vmImage: windows-latest

    steps:
    - task: UseDotNet@2
      displayName: Use .NET Core 7.x SDK
      inputs:
        version: 7.x
        performMultiLevelLookup: true

    - powershell: |
        $existing = & dotnet tool list -g | Select-String "nbgv" 
        if (!$existing) {
            & dotnet tool install -g nbgv
        }
      displayName: Install NBGV tool

    - script: nbgv cloud -a
      displayName: Set Version

    - task: DotNetCoreCLI@2
      inputs:
        command: build
        projects: All.sln
        configuration: Release
        verbosity: Minimal
        arguments: -c Release /p:CreatePackage=true /p:PackageOutputPath=$(Build.ArtifactStagingDirectory)/artifacts /bl:$(Build.ArtifactStagingDirectory)/Logs/Build.binlog
      displayName: Build and Pack

    - publish:  config
      artifact: SigningScripts
      displayName: Publish signing config

    - script: del $(Build.ArtifactStagingDirectory)\artifacts\*.symbols.nupkg
      displayName: Remove redundant packages from upload

    - publish: $(Build.ArtifactStagingDirectory)/artifacts
      displayName: Publish artifacts
      artifact: BuildPackages

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)/Logs
        artifactName: Logs
      displayName: Publish Build Logs
      condition: always()

- stage: ProcessCodeCoverage
  dependsOn: Build
  condition: succeededOrFailed()
  jobs: 
  - job: ProcessCoverage
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self
      fetchDepth: 1
      
    - download: current
      artifact: RawCoverage

    - task: DotNetCoreCLI@2
      inputs:
        command: custom
        custom: tool
        arguments: install -g dotnet-reportgenerator-globaltool
      displayName: Install ReportGenerator tool

    - script: |
        dotnet tool update -g dotnet-reportgenerator-globaltool
        export PATH=$PATH:$HOME/.dotnet/tools
        . ~/.bashrc
        reportgenerator -reports:$(Pipeline.Workspace)/RawCoverage/**/*.xml -sourcedirs:$(Build.SourcesDirectory) -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura;lcov"
      displayName: Consolidate Reports from Jobs

    - task: PublishCodeCoverageResults@1
      displayName: Publish code coverage
      inputs:
        codeCoverageTool: Cobertura
        pathToSources: $(Build.SourcesDirectory)
        summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml

    - script: |
        bash <(curl -s https://codecov.io/bash)
      displayName: 'Upload to codecov.io'
      workingDirectory: $(Build.SourcesDirectory)/coverlet/reports
      env:
        CODECOV_TOKEN: $(CODECOV_TOKEN)
      condition: ne(variables['build.reason'], 'PullRequest')

- stage: CodeSign
  dependsOn: Build
  condition: and(succeeded('Build'), not(or(eq(variables['build.reason'], 'PullRequest'), eq(variables['build.reason'], 'Schedule'))))
  jobs:
  - deployment: CodeSign
    displayName: Code Signing
    pool:
      vmImage: windows-latest
    environment: Code Sign
    variables:
    - group: SignClient Credentials
    strategy:
      runOnce:
        deploy:
          steps:

          - download: current
            artifact: SigningScripts

          - download: current
            artifact: BuildPackages

          - task: DotNetCoreCLI@2
            inputs:
              command: custom
              custom: tool
              arguments: install --tool-path . SignClient
            displayName: Install SignTool tool

          - pwsh: |
              .\SignClient "Sign" `
              --baseDirectory "$(Pipeline.Workspace)\BuildPackages" `
              --input "**/*.nupkg" `
              --config "$(Pipeline.Workspace)\SigningScripts\signclient.json" `
              --user "$(SignClientUser)" `
              --secret "$(SignClientSecret)" `
              --name "Reaqtive" `
              --description "Reaqtive" `
              --descriptionUrl "https://github.com/reaqtive/reaqtor" `
              --logLevel "Verbose"
            displayName: Sign packages

          - publish: $(Pipeline.Workspace)/BuildPackages
            displayName: Publish Signed Packages
            artifact: SignedPackages
