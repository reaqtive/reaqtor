// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT License.
// See the LICENSE file in the project root for more information.

//
// Revision history:
//
// BD - May 2017 - Initial prototype of JIT.
//

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var ordinals = new[] { "", "first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth", "eleventh", "twelfth", "thirteenth", "fourteenth", "fifteenth", "sixteenth" };
const int N = 16;
#>
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;

namespace System.Runtime.CompilerServices
{
    /// <summary>
    /// Provides a table with built-in precompiled closure types.
    /// </summary>
    internal static class Closures
    {
        /// <summary>
        /// A list of built-in precompiled closure types. The index corresponds to the generic arity of the closure type and hence
        /// the number of available slots for hoisted locals.
        /// </summary>
        /// <remarks>
        /// This field should be used in a read-only manner; we don't put a read-only wrapper or use a read-only interface to avoid any
        /// overheads in accessing it (considering that this field is only used internally).
        /// </remarks>
        public static readonly List<Type> Types = new List<Type>(<#=N + 1#>)
        {
            { typeof(Empty) }, // NB: Closure parameter to use when no variables are hoisted; simplifies code-gen.
<#
for (var i = 0; i < N; i++)
{
    var commas = new string(',', i);
#>
            { typeof(Closure<<#=commas#>>) },
<#
}
#>
        };
    }

<#
for (var i = 1; i <= N; i++)
{
    var genArgs = string.Join(", ", Enumerable.Range(1, i).Select(j => "T" + j));
#>
    /// <summary>
    /// This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.
    /// Represents the runtime state of a dynamically generated method.
    /// </summary>
    [EditorBrowsable(EditorBrowsableState.Never), DebuggerStepThrough]
    public sealed class Closure<<#=genArgs#>> : IRuntimeVariables
    {
<#
for (var j = 1; j <= i; j++)
{
#>
        /// <summary>
        /// Field holding the <#=ordinals[j]#> piece of state.
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        public T<#=j#> Item<#=j#>;

<#
}
#>
        /// <summary>
        /// Count of the variables.
        /// </summary>
        int IRuntimeVariables.Count => <#=i#>;

        /// <summary>
        /// An indexer to get/set the values of the runtime variables.
        /// </summary>
        /// <param name="index">An index of the runtime variable.</param>
        /// <returns>The value of the runtime variable.</returns>
        object IRuntimeVariables.this[int index]
        {
            get => index switch
            {
<#
for (var j = 1; j <= i; j++)
{
#>
                <#=j - 1#> => Item<#=j#>,
<#
}
#>
                _ => throw new ArgumentOutOfRangeException(nameof(index))
            };

            set
            {
                switch (index)
                {
<#
for (var j = 1; j <= i; j++)
{
#>
                    case <#=j - 1#>:
                        Item<#=j#> = (T<#=j#>)value;
                        break;
<#
}
#>
                    default:
                        throw new ArgumentOutOfRangeException(nameof(index));
                }
            }
        }
    }

<#
}
#>
}