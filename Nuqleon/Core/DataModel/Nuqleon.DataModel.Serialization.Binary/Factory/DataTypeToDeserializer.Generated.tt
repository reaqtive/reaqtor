// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT License.
// See the LICENSE file in the project root for more information.

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var types = new List<string>
{
    typeof(sbyte).Name,
    typeof(short).Name,
    typeof(ushort).Name,
    typeof(int).Name,
    typeof(uint).Name,
    typeof(long).Name,
    typeof(ulong).Name,
    typeof(float).Name,
    typeof(double).Name,
    typeof(decimal).Name,
    typeof(char).Name,
    typeof(bool).Name,
    typeof(Guid).Name,
};

#>
using System;
using System.IO;
using System.Linq.CompilerServices;
using System.Linq.Expressions;
using System.Reflection;

namespace Nuqleon.DataModel.Serialization.Binary
{
    partial class DataTypeToDeserializer
    {
<#
foreach (var type in types)
{
#>
        private static readonly Lazy<MethodInfo> s_read<#=type#> = new Lazy<MethodInfo>(() => (MethodInfo)ReflectionHelpers.InfoOf(() => StreamHelpers.Read<#=type#>(default(Stream))));

        private static LambdaExpression Visit<#=type#>(Type type, bool isNullable)
        {
            var streamParameter = Expression.Parameter(typeof(Stream), "stream");

            var typeCode = Protocol.TYPE_<#=type.ToUpperInvariant()#>;
            var body = default(Expression);
            if (isNullable)
            {
                typeCode |= Protocol.TYPE_FLAG_ISNULLABLE;
                var typeCodeConstant = Expression.Constant(typeCode, typeof(byte));
                var tcParameter = Expression.Parameter(typeof(byte), "tc");
                body = Expression.Block(
                    // byte tc;
                    new[] { tcParameter },
                    // tc = stream.ReadByte();
                    Expression.Assign(tcParameter, Expression.Call(ReflectionConstants.ReadByte, streamParameter)),
                    // if (tc & typeCode != typeCode) throw new InvalidDataException("Unexpected type code.");
                    Expression.IfThen(
                        Expression.NotEqual(Expression.And(tcParameter, typeCodeConstant), typeCodeConstant),
                        ReflectionConstants.ThrowUnexpectedTypeCode
                    ),
                    // return (tc & Protocol.TYPE_FLAG_NULLVALUE == Protocol.TYPE_FLAG_NULLVALUE) ? (<#=type#>?)null : (<#=type#>?)stream.Read<#=type#>();
                    Expression.Condition(
                        Expression.Equal(Expression.And(tcParameter, ReflectionConstants.NullValueFlag), ReflectionConstants.NullValueFlag),
                        Expression.Convert(ReflectionConstants.NullObject, type),
                        Expression.Convert(Expression.Call(s_read<#=type#>.Value, streamParameter), type)
                    )
                );
            }
            else
            {
                body = Expression.Block(
                    // if (stream.ReadByte() != typeCode) throw new InvalidDataException("Unexpected type code.");
                    Expression.IfThen(
                        Expression.NotEqual(Expression.Call(ReflectionConstants.ReadByte, streamParameter), Expression.Constant(typeCode, typeof(byte))),
                        ReflectionConstants.ThrowUnexpectedTypeCode
                    ),
                    // return stream.Read<#=type#>();
                    Expression.Call(s_read<#=type#>.Value, streamParameter)
                );
            }

            return Expression.Lambda(body, streamParameter);
        }

<#
}
#>
    }
}
