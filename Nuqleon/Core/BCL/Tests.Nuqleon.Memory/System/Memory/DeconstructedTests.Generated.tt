// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT License.
// See the LICENSE file in the project root for more information.

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
const int N = 4;
#>
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Memory;

namespace Tests.System.Memory
{
    public partial class DeconstructedTests
    {
<#
for (var i = 2; i <= N; ++i)
{
#>
        [TestMethod]
        public void Deconstructed_<#=i#>Cached_Equality()
        {
            var d1 = Deconstructed.Create(<#=string.Join(", ", Enumerable.Range(1, i + 1).Select(j => j))#>);
            var d2 = Deconstructed.Create(<#=string.Join(", ", Enumerable.Range(1, i + 1).Select(j => j))#>);
<#
for (var j = 0; j <= i; j++)
{
#>
            var d<#=j+3#> = Deconstructed.Create(<#=string.Join(", ", Enumerable.Range(1, i + 1).Select((k, idx) => idx == j ? "int.MaxValue" : k.ToString()))#>);
<#
}
#>

            Assert.IsTrue(d1 == d2);
            Assert.IsTrue(d1.Equals((object)d2));
            Assert.IsFalse(d1.Equals(new object()));
            Assert.IsTrue(d1 != d3);
<#
for (var j = 0; j <= i; j++)
{
#>
            Assert.IsFalse(d1 == d<#=j+3#>);
<#
}
#>

            Assert.AreEqual(d1.GetHashCode(), d2.GetHashCode());
        }

<#
}
#>
    }
}
