// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT License.
// See the LICENSE file in the project root for more information.

//
// Revision history:
//
// BD - January 2017 - Created this file.
//


using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq.Expressions;

namespace Tests.System.Linq.Expressions.Optimizers
{
    partial class ExpressionOptimizerTests
    {
        [TestMethod]
        public void Binary_Add_Eval_Int16()
        {
            AssertEval(
                Expression.Add(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* -32767 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* -32726 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -2 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 41 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 32766 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 42 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -32767 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 2 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 43 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -32726 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 41 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 42 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 43 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 84 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* -32727 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 32766 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* -32727 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* -2 */
            );
        }

        [TestMethod]
        public void Binary_Add_Eval_NullableInt16()
        {
            var n = Expression.Constant((short?)null, typeof(short?));

            AssertEval(
                Expression.Add(n, n)
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* -32767 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* -32726 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -2 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 32766 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -32767 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 2 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -32726 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 84 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* -32727 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 32766 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* -32727 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* -2 */
            );
        }

        [TestMethod]
        public void Binary_Add_Eval_UInt16()
        {
            AssertEval(
                Expression.Add(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 42 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 65535 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 2 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 43 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 42 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 43 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 84 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 41 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 65535 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 41 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 65534 */
            );
        }

        [TestMethod]
        public void Binary_Add_Eval_NullableUInt16()
        {
            var n = Expression.Constant((ushort?)null, typeof(ushort?));

            AssertEval(
                Expression.Add(n, n)
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 65535 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 2 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 84 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 65535 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 65534 */
            );
        }

        [TestMethod]
        public void Binary_Add_Eval_Int32()
        {
            AssertEval(
                Expression.Add(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* -2147483647 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* -2147483606 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -2 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 41 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 2147483646 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -2147483647 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 2 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 43 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -2147483606 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 41 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 43 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 84 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -2147483607 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 2147483646 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* -2147483607 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -2 */
            );
        }

        [TestMethod]
        public void Binary_Add_Eval_NullableInt32()
        {
            var n = Expression.Constant((int?)null, typeof(int?));

            AssertEval(
                Expression.Add(n, n)
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* -2147483647 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* -2147483606 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -2 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 2147483646 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -2147483647 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 2 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -2147483606 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 84 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -2147483607 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 2147483646 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* -2147483607 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -2 */
            );
        }

        [TestMethod]
        public void Binary_Add_Eval_UInt32()
        {
            AssertEval(
                Expression.Add(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 42 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 4294967295 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 2 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 43 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 42 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 43 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 84 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 41 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 4294967295 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 41 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 4294967294 */
            );
        }

        [TestMethod]
        public void Binary_Add_Eval_NullableUInt32()
        {
            var n = Expression.Constant((uint?)null, typeof(uint?));

            AssertEval(
                Expression.Add(n, n)
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 4294967295 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 2 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 84 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 4294967295 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 4294967294 */
            );
        }

        [TestMethod]
        public void Binary_Add_Eval_Int64()
        {
            AssertEval(
                Expression.Add(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* -9223372036854775766 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -2 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 41 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 9223372036854775806 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 42 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 2 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 43 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -9223372036854775766 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 41 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 42 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 43 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 84 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* -9223372036854775767 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 9223372036854775806 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* -9223372036854775767 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* -2 */
            );
        }

        [TestMethod]
        public void Binary_Add_Eval_NullableInt64()
        {
            var n = Expression.Constant((long?)null, typeof(long?));

            AssertEval(
                Expression.Add(n, n)
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* -9223372036854775766 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -2 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 9223372036854775806 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 2 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -9223372036854775766 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 84 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* -9223372036854775767 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 9223372036854775806 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* -9223372036854775767 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* -2 */
            );
        }

        [TestMethod]
        public void Binary_Add_Eval_UInt64()
        {
            AssertEval(
                Expression.Add(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 42 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 2 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 43 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 42 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 43 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 84 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 41 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 41 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 18446744073709551614 */
            );
        }

        [TestMethod]
        public void Binary_Add_Eval_NullableUInt64()
        {
            var n = Expression.Constant((ulong?)null, typeof(ulong?));

            AssertEval(
                Expression.Add(n, n)
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 2 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 84 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 18446744073709551614 */
            );
        }

        [TestMethod]
        public void Binary_Add_Eval_Single()
        {
            AssertEval(
                Expression.Add(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* 3.14 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 2 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* 4.14 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* 3.14 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 4.14 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* 6.28 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* ∞ */
            );
        }

        [TestMethod]
        public void Binary_Add_Eval_NullableSingle()
        {
            var n = Expression.Constant((float?)null, typeof(float?));

            AssertEval(
                Expression.Add(n, n)
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 2 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* 4.14 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 4.14 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* 6.28 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* ∞ */
            );
        }

        [TestMethod]
        public void Binary_Add_Eval_Double()
        {
            AssertEval(
                Expression.Add(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* 3.14 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 2 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* 4.14 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* 3.14 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 4.14 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* 6.28 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* ∞ */
            );
        }

        [TestMethod]
        public void Binary_Add_Eval_NullableDouble()
        {
            var n = Expression.Constant((double?)null, typeof(double?));

            AssertEval(
                Expression.Add(n, n)
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 2 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* 4.14 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 4.14 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* 6.28 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Add(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Add(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* ∞ */
            );
        }

        [TestMethod]
        public void Binary_AddChecked_Eval_Int16()
        {
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* -32767 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* -32726 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -2 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 41 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 32766 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 42 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -32767 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 2 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 43 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -32726 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 41 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 42 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 43 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 84 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 32766 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* typeof(global::System.OverflowException */
            );
        }

        [TestMethod]
        public void Binary_AddChecked_Eval_NullableInt16()
        {
            var n = Expression.Constant((short?)null, typeof(short?));

            AssertEval(
                Expression.AddChecked(n, n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* -32767 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* -32726 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -2 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 32766 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -32767 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 2 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -32726 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 84 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 32766 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* typeof(global::System.OverflowException) */
            );
        }

        [TestMethod]
        public void Binary_AddChecked_Eval_UInt16()
        {
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 42 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 65535 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 2 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 43 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 42 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 43 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 84 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 65535 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* typeof(global::System.OverflowException */
            );
        }

        [TestMethod]
        public void Binary_AddChecked_Eval_NullableUInt16()
        {
            var n = Expression.Constant((ushort?)null, typeof(ushort?));

            AssertEval(
                Expression.AddChecked(n, n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 65535 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 2 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 84 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 65535 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* typeof(global::System.OverflowException) */
            );
        }

        [TestMethod]
        public void Binary_AddChecked_Eval_Int32()
        {
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* -2147483647 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* -2147483606 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -2 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 41 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 2147483646 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -2147483647 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 2 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 43 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -2147483606 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 41 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 43 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 84 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 2147483646 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
        }

        [TestMethod]
        public void Binary_AddChecked_Eval_NullableInt32()
        {
            var n = Expression.Constant((int?)null, typeof(int?));

            AssertEval(
                Expression.AddChecked(n, n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* -2147483647 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* -2147483606 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -2 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 2147483646 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -2147483647 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 2 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -2147483606 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 84 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 2147483646 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
        }

        [TestMethod]
        public void Binary_AddChecked_Eval_UInt32()
        {
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 42 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 4294967295 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 2 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 43 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 42 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 43 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 84 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 4294967295 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* typeof(global::System.OverflowException */
            );
        }

        [TestMethod]
        public void Binary_AddChecked_Eval_NullableUInt32()
        {
            var n = Expression.Constant((uint?)null, typeof(uint?));

            AssertEval(
                Expression.AddChecked(n, n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 4294967295 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 2 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 84 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 4294967295 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* typeof(global::System.OverflowException) */
            );
        }

        [TestMethod]
        public void Binary_AddChecked_Eval_Int64()
        {
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* -9223372036854775766 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -2 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 41 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 9223372036854775806 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 42 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 2 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 43 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -9223372036854775766 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 41 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 42 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 43 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 84 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 9223372036854775806 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
        }

        [TestMethod]
        public void Binary_AddChecked_Eval_NullableInt64()
        {
            var n = Expression.Constant((long?)null, typeof(long?));

            AssertEval(
                Expression.AddChecked(n, n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* -9223372036854775766 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -2 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 9223372036854775806 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 2 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -9223372036854775766 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 84 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 9223372036854775806 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
        }

        [TestMethod]
        public void Binary_AddChecked_Eval_UInt64()
        {
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 42 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 2 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 43 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 42 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 43 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 84 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* typeof(global::System.OverflowException */
            );
        }

        [TestMethod]
        public void Binary_AddChecked_Eval_NullableUInt64()
        {
            var n = Expression.Constant((ulong?)null, typeof(ulong?));

            AssertEval(
                Expression.AddChecked(n, n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 2 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 84 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* typeof(global::System.OverflowException) */
            );
        }

        [TestMethod]
        public void Binary_AddChecked_Eval_Single()
        {
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* 3.14 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 2 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* 4.14 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* 3.14 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 4.14 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* 6.28 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* ∞ */
            );
        }

        [TestMethod]
        public void Binary_AddChecked_Eval_NullableSingle()
        {
            var n = Expression.Constant((float?)null, typeof(float?));

            AssertEval(
                Expression.AddChecked(n, n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 2 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* 4.14 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 4.14 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* 6.28 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* ∞ */
            );
        }

        [TestMethod]
        public void Binary_AddChecked_Eval_Double()
        {
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* 3.14 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 2 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* 4.14 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* 3.14 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 4.14 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* 6.28 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* ∞ */
            );
        }

        [TestMethod]
        public void Binary_AddChecked_Eval_NullableDouble()
        {
            var n = Expression.Constant((double?)null, typeof(double?));

            AssertEval(
                Expression.AddChecked(n, n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 2 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* 4.14 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 4.14 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* 6.28 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.AddChecked(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.AddChecked(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* ∞ */
            );
        }

        [TestMethod]
        public void Binary_Subtract_Eval_Int16()
        {
            AssertEval(
                Expression.Subtract(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -32767 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 32726 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* -2 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* -43 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* -42 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* -32767 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -32767 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 2 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* -41 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* -32766 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -32726 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 43 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 42 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 41 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* -32725 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 32766 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 32725 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_Subtract_Eval_NullableInt16()
        {
            var n = Expression.Constant((short?)null, typeof(short?));

            AssertEval(
                Expression.Subtract(n, n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -32767 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 32726 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* -2 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* -43 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* -32767 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -32767 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 2 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* -41 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* -32766 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -32726 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* -32725 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 32766 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 32725 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_Subtract_Eval_UInt16()
        {
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 65535 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 65494 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 65495 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 2 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 42 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 41 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 43 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 65535 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 65534 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 65493 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_Subtract_Eval_NullableUInt16()
        {
            var n = Expression.Constant((ushort?)null, typeof(ushort?));

            AssertEval(
                Expression.Subtract(n, n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 65535 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 65494 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 65495 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 2 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 65535 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 65534 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 65493 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_Subtract_Eval_Int32()
        {
            AssertEval(
                Expression.Subtract(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -2147483647 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 2147483606 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* -2 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* -43 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* -42 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -2147483647 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -2147483647 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 2 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* -41 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -2147483646 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -2147483606 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 43 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 41 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -2147483605 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 2147483646 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 2147483605 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_Subtract_Eval_NullableInt32()
        {
            var n = Expression.Constant((int?)null, typeof(int?));

            AssertEval(
                Expression.Subtract(n, n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -2147483647 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 2147483606 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* -2 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* -43 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -2147483647 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -2147483647 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 2 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* -41 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -2147483646 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -2147483606 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -2147483605 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 2147483646 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 2147483605 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_Subtract_Eval_UInt32()
        {
            AssertEval(
                Expression.Subtract(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 4294967295 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 4294967254 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 4294967255 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 2 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 42 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 41 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 43 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 4294967295 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 4294967294 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 4294967253 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_Subtract_Eval_NullableUInt32()
        {
            var n = Expression.Constant((uint?)null, typeof(uint?));

            AssertEval(
                Expression.Subtract(n, n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 4294967295 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 4294967254 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 4294967255 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 2 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 4294967295 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 4294967294 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 4294967253 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_Subtract_Eval_Int64()
        {
            AssertEval(
                Expression.Subtract(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 9223372036854775766 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* -2 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* -43 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* -42 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 2 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* -41 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* -9223372036854775806 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -9223372036854775766 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 43 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 42 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 41 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* -9223372036854775765 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 9223372036854775806 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 9223372036854775765 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_Subtract_Eval_NullableInt64()
        {
            var n = Expression.Constant((long?)null, typeof(long?));

            AssertEval(
                Expression.Subtract(n, n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 9223372036854775766 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* -2 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* -43 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 2 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* -41 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* -9223372036854775806 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -9223372036854775766 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* -9223372036854775765 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 9223372036854775806 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 9223372036854775765 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_Subtract_Eval_UInt64()
        {
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 18446744073709551574 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 18446744073709551575 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 2 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 42 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 41 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 43 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 18446744073709551614 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 18446744073709551573 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_Subtract_Eval_NullableUInt64()
        {
            var n = Expression.Constant((ulong?)null, typeof(ulong?));

            AssertEval(
                Expression.Subtract(n, n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 18446744073709551574 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 18446744073709551575 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 2 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 18446744073709551614 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 18446744073709551573 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_Subtract_Eval_Single()
        {
            AssertEval(
                Expression.Subtract(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* -1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* -3.14 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* -2.14 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* 3.14 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 2.14 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* nan */
            );
        }

        [TestMethod]
        public void Binary_Subtract_Eval_NullableSingle()
        {
            var n = Expression.Constant((float?)null, typeof(float?));

            AssertEval(
                Expression.Subtract(n, n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* -3.14 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* -2.14 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 2.14 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* nan */
            );
        }

        [TestMethod]
        public void Binary_Subtract_Eval_Double()
        {
            AssertEval(
                Expression.Subtract(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* -1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* -3.14 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* -2.14 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* 3.14 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 2.14 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* nan */
            );
        }

        [TestMethod]
        public void Binary_Subtract_Eval_NullableDouble()
        {
            var n = Expression.Constant((double?)null, typeof(double?));

            AssertEval(
                Expression.Subtract(n, n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* -3.14 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* -2.14 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 2.14 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Subtract(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Subtract(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* nan */
            );
        }

        [TestMethod]
        public void Binary_SubtractChecked_Eval_Int16()
        {
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -32767 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* -2 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* -43 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* -42 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* -32767 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 2 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* -41 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* -32766 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 43 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 42 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 41 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* -32725 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 32766 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 32725 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_SubtractChecked_Eval_NullableInt16()
        {
            var n = Expression.Constant((short?)null, typeof(short?));

            AssertEval(
                Expression.SubtractChecked(n, n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -32767 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* -2 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* -43 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* -32767 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 2 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* -41 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* -32766 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* -32725 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 32766 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 32725 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_SubtractChecked_Eval_UInt16()
        {
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 42 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 41 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 65535 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 65534 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 65493 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_SubtractChecked_Eval_NullableUInt16()
        {
            var n = Expression.Constant((ushort?)null, typeof(ushort?));

            AssertEval(
                Expression.SubtractChecked(n, n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 65535 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 65534 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 65493 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_SubtractChecked_Eval_Int32()
        {
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -2147483647 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* -2 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* -43 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* -42 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -2147483647 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 2 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* -41 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -2147483646 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 43 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 41 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -2147483605 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 2147483646 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 2147483605 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_SubtractChecked_Eval_NullableInt32()
        {
            var n = Expression.Constant((int?)null, typeof(int?));

            AssertEval(
                Expression.SubtractChecked(n, n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -2147483647 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* -2 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* -43 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -2147483647 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 2 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* -41 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -2147483646 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -2147483605 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 2147483646 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 2147483605 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_SubtractChecked_Eval_UInt32()
        {
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 42 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 41 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 4294967295 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 4294967294 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 4294967253 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_SubtractChecked_Eval_NullableUInt32()
        {
            var n = Expression.Constant((uint?)null, typeof(uint?));

            AssertEval(
                Expression.SubtractChecked(n, n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 4294967295 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 4294967294 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 4294967253 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_SubtractChecked_Eval_Int64()
        {
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* -2 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* -43 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* -42 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 2 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* -41 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* -9223372036854775806 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 43 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 42 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 41 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* -9223372036854775765 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 9223372036854775806 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 9223372036854775765 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_SubtractChecked_Eval_NullableInt64()
        {
            var n = Expression.Constant((long?)null, typeof(long?));

            AssertEval(
                Expression.SubtractChecked(n, n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* -2 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* -43 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 2 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* -41 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* -9223372036854775806 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* -9223372036854775765 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 9223372036854775806 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 9223372036854775765 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_SubtractChecked_Eval_UInt64()
        {
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 42 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 41 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 18446744073709551614 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 18446744073709551573 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_SubtractChecked_Eval_NullableUInt64()
        {
            var n = Expression.Constant((ulong?)null, typeof(ulong?));

            AssertEval(
                Expression.SubtractChecked(n, n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 41 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 18446744073709551614 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 18446744073709551573 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_SubtractChecked_Eval_Single()
        {
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* -1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* -3.14 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* 1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* -2.14 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* 3.14 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 2.14 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* nan */
            );
        }

        [TestMethod]
        public void Binary_SubtractChecked_Eval_NullableSingle()
        {
            var n = Expression.Constant((float?)null, typeof(float?));

            AssertEval(
                Expression.SubtractChecked(n, n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* -3.14 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* -2.14 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 2.14 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* nan */
            );
        }

        [TestMethod]
        public void Binary_SubtractChecked_Eval_Double()
        {
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* -1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* -3.14 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* 1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* -2.14 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* 3.14 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 2.14 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* nan */
            );
        }

        [TestMethod]
        public void Binary_SubtractChecked_Eval_NullableDouble()
        {
            var n = Expression.Constant((double?)null, typeof(double?));

            AssertEval(
                Expression.SubtractChecked(n, n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* -3.14 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* -2.14 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 2.14 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.SubtractChecked(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* nan */
            );
        }

        [TestMethod]
        public void Binary_Multiply_Eval_Int16()
        {
            AssertEval(
                Expression.Multiply(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* -42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* -32767 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 1764 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* -42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -32767 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* -42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 1 */
            );
        }

        [TestMethod]
        public void Binary_Multiply_Eval_NullableInt16()
        {
            var n = Expression.Constant((short?)null, typeof(short?));

            AssertEval(
                Expression.Multiply(n, n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* -32767 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 1764 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -32767 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 1 */
            );
        }

        [TestMethod]
        public void Binary_Multiply_Eval_UInt16()
        {
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 65535 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 1764 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 65494 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 65535 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 65494 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 1 */
            );
        }

        [TestMethod]
        public void Binary_Multiply_Eval_NullableUInt16()
        {
            var n = Expression.Constant((ushort?)null, typeof(ushort?));

            AssertEval(
                Expression.Multiply(n, n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 65535 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 1764 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 65494 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 65535 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 65494 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 1 */
            );
        }

        [TestMethod]
        public void Binary_Multiply_Eval_Int32()
        {
            AssertEval(
                Expression.Multiply(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* -42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -2147483647 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 1764 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -2147483647 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* -42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 1 */
            );
        }

        [TestMethod]
        public void Binary_Multiply_Eval_NullableInt32()
        {
            var n = Expression.Constant((int?)null, typeof(int?));

            AssertEval(
                Expression.Multiply(n, n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -2147483647 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 1764 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -2147483647 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 1 */
            );
        }

        [TestMethod]
        public void Binary_Multiply_Eval_UInt32()
        {
            AssertEval(
                Expression.Multiply(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 4294967295 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 1764 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 4294967254 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 4294967295 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 4294967254 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 1 */
            );
        }

        [TestMethod]
        public void Binary_Multiply_Eval_NullableUInt32()
        {
            var n = Expression.Constant((uint?)null, typeof(uint?));

            AssertEval(
                Expression.Multiply(n, n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 4294967295 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 1764 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 4294967254 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 4294967295 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 4294967254 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 1 */
            );
        }

        [TestMethod]
        public void Binary_Multiply_Eval_Int64()
        {
            AssertEval(
                Expression.Multiply(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* -42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 1764 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* -42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* -42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 1 */
            );
        }

        [TestMethod]
        public void Binary_Multiply_Eval_NullableInt64()
        {
            var n = Expression.Constant((long?)null, typeof(long?));

            AssertEval(
                Expression.Multiply(n, n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 1764 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 1 */
            );
        }

        [TestMethod]
        public void Binary_Multiply_Eval_UInt64()
        {
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 1764 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 18446744073709551574 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 18446744073709551574 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 1 */
            );
        }

        [TestMethod]
        public void Binary_Multiply_Eval_NullableUInt64()
        {
            var n = Expression.Constant((ulong?)null, typeof(ulong?));

            AssertEval(
                Expression.Multiply(n, n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 1764 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 18446744073709551574 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 18446744073709551574 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 1 */
            );
        }

        [TestMethod]
        public void Binary_Multiply_Eval_Single()
        {
            AssertEval(
                Expression.Multiply(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* 3.14 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 3.14 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* 9.859601 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* ∞ */
            );
        }

        [TestMethod]
        public void Binary_Multiply_Eval_NullableSingle()
        {
            var n = Expression.Constant((float?)null, typeof(float?));

            AssertEval(
                Expression.Multiply(n, n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* 9.859601 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* ∞ */
            );
        }

        [TestMethod]
        public void Binary_Multiply_Eval_Double()
        {
            AssertEval(
                Expression.Multiply(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* 3.14 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 3.14 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* 9.8596 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* ∞ */
            );
        }

        [TestMethod]
        public void Binary_Multiply_Eval_NullableDouble()
        {
            var n = Expression.Constant((double?)null, typeof(double?));

            AssertEval(
                Expression.Multiply(n, n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* 9.8596 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Multiply(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Multiply(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* ∞ */
            );
        }

        [TestMethod]
        public void Binary_MultiplyChecked_Eval_Int16()
        {
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* -42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* -32767 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 1764 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -32767 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* typeof(global::System.OverflowException */
            );
        }

        [TestMethod]
        public void Binary_MultiplyChecked_Eval_NullableInt16()
        {
            var n = Expression.Constant((short?)null, typeof(short?));

            AssertEval(
                Expression.MultiplyChecked(n, n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* -32767 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 1764 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -32767 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* typeof(global::System.OverflowException) */
            );
        }

        [TestMethod]
        public void Binary_MultiplyChecked_Eval_UInt16()
        {
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 65535 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 1764 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 65535 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* typeof(global::System.OverflowException */
            );
        }

        [TestMethod]
        public void Binary_MultiplyChecked_Eval_NullableUInt16()
        {
            var n = Expression.Constant((ushort?)null, typeof(ushort?));

            AssertEval(
                Expression.MultiplyChecked(n, n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 65535 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 1764 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 65535 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* typeof(global::System.OverflowException) */
            );
        }

        [TestMethod]
        public void Binary_MultiplyChecked_Eval_Int32()
        {
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* -42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -2147483647 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 1764 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -2147483647 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
        }

        [TestMethod]
        public void Binary_MultiplyChecked_Eval_NullableInt32()
        {
            var n = Expression.Constant((int?)null, typeof(int?));

            AssertEval(
                Expression.MultiplyChecked(n, n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -2147483647 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 1764 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -2147483647 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
        }

        [TestMethod]
        public void Binary_MultiplyChecked_Eval_UInt32()
        {
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 4294967295 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 1764 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 4294967295 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* typeof(global::System.OverflowException */
            );
        }

        [TestMethod]
        public void Binary_MultiplyChecked_Eval_NullableUInt32()
        {
            var n = Expression.Constant((uint?)null, typeof(uint?));

            AssertEval(
                Expression.MultiplyChecked(n, n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 4294967295 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 1764 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 4294967295 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* typeof(global::System.OverflowException) */
            );
        }

        [TestMethod]
        public void Binary_MultiplyChecked_Eval_Int64()
        {
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* -42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 1764 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
        }

        [TestMethod]
        public void Binary_MultiplyChecked_Eval_NullableInt64()
        {
            var n = Expression.Constant((long?)null, typeof(long?));

            AssertEval(
                Expression.MultiplyChecked(n, n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 1764 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
        }

        [TestMethod]
        public void Binary_MultiplyChecked_Eval_UInt64()
        {
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 1764 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* typeof(global::System.OverflowException */
            );
        }

        [TestMethod]
        public void Binary_MultiplyChecked_Eval_NullableUInt64()
        {
            var n = Expression.Constant((ulong?)null, typeof(ulong?));

            AssertEval(
                Expression.MultiplyChecked(n, n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 1764 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* typeof(global::System.OverflowException) */
            );
        }

        [TestMethod]
        public void Binary_MultiplyChecked_Eval_Single()
        {
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* 3.14 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 3.14 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* 9.859601 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* ∞ */
            );
        }

        [TestMethod]
        public void Binary_MultiplyChecked_Eval_NullableSingle()
        {
            var n = Expression.Constant((float?)null, typeof(float?));

            AssertEval(
                Expression.MultiplyChecked(n, n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* 9.859601 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* ∞ */
            );
        }

        [TestMethod]
        public void Binary_MultiplyChecked_Eval_Double()
        {
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* 3.14 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 3.14 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* 9.8596 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* ∞ */
            );
        }

        [TestMethod]
        public void Binary_MultiplyChecked_Eval_NullableDouble()
        {
            var n = Expression.Constant((double?)null, typeof(double?));

            AssertEval(
                Expression.MultiplyChecked(n, n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* 9.8596 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.MultiplyChecked(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* ∞ */
            );
        }

        [TestMethod]
        public void Binary_Divide_Eval_Int16()
        {
            AssertEval(
                Expression.Divide(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* -780 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -42 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 42 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -32767 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 780 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 1 */
            );
        }

        [TestMethod]
        public void Binary_Divide_Eval_NullableInt16()
        {
            var n = Expression.Constant((short?)null, typeof(short?));

            AssertEval(
                Expression.Divide(n, n)
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* -780 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -32767 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 780 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 1 */
            );
        }

        [TestMethod]
        public void Binary_Divide_Eval_UInt16()
        {
            AssertEval(
                Expression.Divide(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 42 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 65535 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 1560 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 1 */
            );
        }

        [TestMethod]
        public void Binary_Divide_Eval_NullableUInt16()
        {
            var n = Expression.Constant((ushort?)null, typeof(ushort?));

            AssertEval(
                Expression.Divide(n, n)
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 65535 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 1560 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 1 */
            );
        }

        [TestMethod]
        public void Binary_Divide_Eval_Int32()
        {
            AssertEval(
                Expression.Divide(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* -51130563 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -42 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -2147483647 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 51130563 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 1 */
            );
        }

        [TestMethod]
        public void Binary_Divide_Eval_NullableInt32()
        {
            var n = Expression.Constant((int?)null, typeof(int?));

            AssertEval(
                Expression.Divide(n, n)
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* -51130563 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -2147483647 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 51130563 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 1 */
            );
        }

        [TestMethod]
        public void Binary_Divide_Eval_UInt32()
        {
            AssertEval(
                Expression.Divide(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 42 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 4294967295 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 102261126 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 1 */
            );
        }

        [TestMethod]
        public void Binary_Divide_Eval_NullableUInt32()
        {
            var n = Expression.Constant((uint?)null, typeof(uint?));

            AssertEval(
                Expression.Divide(n, n)
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 4294967295 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 102261126 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 1 */
            );
        }

        [TestMethod]
        public void Binary_Divide_Eval_Int64()
        {
            AssertEval(
                Expression.Divide(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* -219604096115589900 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -42 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 42 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 219604096115589900 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 1 */
            );
        }

        [TestMethod]
        public void Binary_Divide_Eval_NullableInt64()
        {
            var n = Expression.Constant((long?)null, typeof(long?));

            AssertEval(
                Expression.Divide(n, n)
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* -219604096115589900 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -42 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 219604096115589900 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 1 */
            );
        }

        [TestMethod]
        public void Binary_Divide_Eval_UInt64()
        {
            AssertEval(
                Expression.Divide(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 42 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 439208192231179800 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 1 */
            );
        }

        [TestMethod]
        public void Binary_Divide_Eval_NullableUInt64()
        {
            var n = Expression.Constant((ulong?)null, typeof(ulong?));

            AssertEval(
                Expression.Divide(n, n)
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 439208192231179800 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 1 */
            );
        }

        [TestMethod]
        public void Binary_Divide_Eval_Single()
        {
            AssertEval(
                Expression.Divide(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* 0.3184713 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* -2.938736e-39 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* 2.938736e-39 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 3.14 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* -9.227632e-39 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* 9.227632e-39 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* -1.083702e+38 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* -1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* 1.083702e+38 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* -1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* -∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* nan */
            );
        }

        [TestMethod]
        public void Binary_Divide_Eval_NullableSingle()
        {
            var n = Expression.Constant((float?)null, typeof(float?));

            AssertEval(
                Expression.Divide(n, n)
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* 0.3184713 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* -2.938736e-39 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* 2.938736e-39 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* -9.227632e-39 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* 9.227632e-39 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* -1.083702e+38 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* 1.083702e+38 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* nan */
            );
        }

        [TestMethod]
        public void Binary_Divide_Eval_Double()
        {
            AssertEval(
                Expression.Divide(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* 0.318471337579618 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* -5.562684646268e-309 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* 5.562684646268e-309 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 3.14 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* -1.74668297892815e-308 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* 1.74668297892815e-308 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* -5.72513737217298e+307 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* -1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* 5.72513737217298e+307 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* -1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* -∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* nan */
            );
        }

        [TestMethod]
        public void Binary_Divide_Eval_NullableDouble()
        {
            var n = Expression.Constant((double?)null, typeof(double?));

            AssertEval(
                Expression.Divide(n, n)
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* 0.318471337579618 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* -5.562684646268e-309 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* 5.562684646268e-309 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* -1.74668297892815e-308 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* 1.74668297892815e-308 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* -5.72513737217298e+307 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* 5.72513737217298e+307 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Divide(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* -∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* ∞ */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Divide(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* nan */
            );
        }

        [TestMethod]
        public void Binary_Modulo_Eval_Int16()
        {
            AssertEval(
                Expression.Modulo(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* -8 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 42 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 42 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 7 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_Modulo_Eval_NullableInt16()
        {
            var n = Expression.Constant((short?)null, typeof(short?));

            AssertEval(
                Expression.Modulo(n, n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* -8 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 7 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_Modulo_Eval_UInt16()
        {
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 42 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 15 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_Modulo_Eval_NullableUInt16()
        {
            var n = Expression.Constant((ushort?)null, typeof(ushort?));

            AssertEval(
                Expression.Modulo(n, n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 15 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_Modulo_Eval_Int32()
        {
            AssertEval(
                Expression.Modulo(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* -2 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_Modulo_Eval_NullableInt32()
        {
            var n = Expression.Constant((int?)null, typeof(int?));

            AssertEval(
                Expression.Modulo(n, n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* -2 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_Modulo_Eval_UInt32()
        {
            AssertEval(
                Expression.Modulo(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 42 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 3 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_Modulo_Eval_NullableUInt32()
        {
            var n = Expression.Constant((uint?)null, typeof(uint?));

            AssertEval(
                Expression.Modulo(n, n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 3 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_Modulo_Eval_Int64()
        {
            AssertEval(
                Expression.Modulo(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* typeof(global::System.OverflowException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* -8 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 42 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 42 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 7 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_Modulo_Eval_NullableInt64()
        {
            var n = Expression.Constant((long?)null, typeof(long?));

            AssertEval(
                Expression.Modulo(n, n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* typeof(global::System.OverflowException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* -8 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 7 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_Modulo_Eval_UInt64()
        {
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 42 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* typeof(global::System.DivideByZeroException */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 15 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_Modulo_Eval_NullableUInt64()
        {
            var n = Expression.Constant((ulong?)null, typeof(ulong?));

            AssertEval(
                Expression.Modulo(n, n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* typeof(global::System.DivideByZeroException) */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 15 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_Modulo_Eval_Single()
        {
            AssertEval(
                Expression.Modulo(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 0.1400001 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* 3.14 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* 3.14 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* 3.14 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* 3.14 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* -0.1407826 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* 0.1407826 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* nan */
            );
        }

        [TestMethod]
        public void Binary_Modulo_Eval_NullableSingle()
        {
            var n = Expression.Constant((float?)null, typeof(float?));

            AssertEval(
                Expression.Modulo(n, n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 0.1400001 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* -0.1407826 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* -3.402823e+38 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* 0.1407826 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* 3.402823e+38 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* nan */
            );
        }

        [TestMethod]
        public void Binary_Modulo_Eval_Double()
        {
            AssertEval(
                Expression.Modulo(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 0.14 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* 3.14 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* 3.14 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* 3.14 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* 3.14 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* -2.53223876964397 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* 2.53223876964397 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* nan */
            );
        }

        [TestMethod]
        public void Binary_Modulo_Eval_NullableDouble()
        {
            var n = Expression.Constant((double?)null, typeof(double?));

            AssertEval(
                Expression.Modulo(n, n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 0.14 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* 3.14 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* -2.53223876964397 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* -1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* 2.53223876964397 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* 1.79769313486232e+308 */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Modulo(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* nan */
            );
            AssertEval(
                Expression.Modulo(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* nan */
            );
        }

        [TestMethod]
        public void Binary_And_Eval_Boolean()
        {
            AssertEval(
                Expression.And(Expression.Constant((bool)false, typeof(bool)), Expression.Constant((bool)false, typeof(bool)))
                /* false */
            );
            AssertEval(
                Expression.And(Expression.Constant((bool)false, typeof(bool)), Expression.Constant((bool)true, typeof(bool)))
                /* false */
            );
            AssertEval(
                Expression.And(Expression.Constant((bool)true, typeof(bool)), Expression.Constant((bool)false, typeof(bool)))
                /* false */
            );
            AssertEval(
                Expression.And(Expression.Constant((bool)true, typeof(bool)), Expression.Constant((bool)true, typeof(bool)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_And_Eval_NullableBoolean()
        {
            var n = Expression.Constant((bool?)null, typeof(bool?));

            AssertEval(
                Expression.And(n, n)
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((bool?)null, typeof(bool?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((bool?)null, typeof(bool?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((bool?)false, typeof(bool?)), Expression.Constant((bool?)false, typeof(bool?)))//,
                /* false */
            );
            AssertEval(
                Expression.And(Expression.Constant((bool?)false, typeof(bool?)), Expression.Constant((bool?)true, typeof(bool?)))//,
                /* false */
            );
            AssertEval(
                Expression.And(Expression.Constant((bool?)null, typeof(bool?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((bool?)null, typeof(bool?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((bool?)true, typeof(bool?)), Expression.Constant((bool?)false, typeof(bool?)))//,
                /* false */
            );
            AssertEval(
                Expression.And(Expression.Constant((bool?)true, typeof(bool?)), Expression.Constant((bool?)true, typeof(bool?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_And_Eval_SByte()
        {
            AssertEval(
                Expression.And(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* -128 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* -128 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* -128 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* -1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* 127 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* 127 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* 127 */
            );
        }

        [TestMethod]
        public void Binary_And_Eval_NullableSByte()
        {
            var n = Expression.Constant((sbyte?)null, typeof(sbyte?));

            AssertEval(
                Expression.And(n, n)
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* -128 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* -128 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* -128 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* 127 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* 127 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* 127 */
            );
        }

        [TestMethod]
        public void Binary_And_Eval_Byte()
        {
            AssertEval(
                Expression.And(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* 255 */
            );
        }

        [TestMethod]
        public void Binary_And_Eval_NullableByte()
        {
            var n = Expression.Constant((byte?)null, typeof(byte?));

            AssertEval(
                Expression.And(n, n)
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* 255 */
            );
        }

        [TestMethod]
        public void Binary_And_Eval_Int16()
        {
            AssertEval(
                Expression.And(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 32767 */
            );
        }

        [TestMethod]
        public void Binary_And_Eval_NullableInt16()
        {
            var n = Expression.Constant((short?)null, typeof(short?));

            AssertEval(
                Expression.And(n, n)
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 32767 */
            );
        }

        [TestMethod]
        public void Binary_And_Eval_UInt16()
        {
            AssertEval(
                Expression.And(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 65535 */
            );
        }

        [TestMethod]
        public void Binary_And_Eval_NullableUInt16()
        {
            var n = Expression.Constant((ushort?)null, typeof(ushort?));

            AssertEval(
                Expression.And(n, n)
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 65535 */
            );
        }

        [TestMethod]
        public void Binary_And_Eval_Int32()
        {
            AssertEval(
                Expression.And(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 2147483647 */
            );
        }

        [TestMethod]
        public void Binary_And_Eval_NullableInt32()
        {
            var n = Expression.Constant((int?)null, typeof(int?));

            AssertEval(
                Expression.And(n, n)
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 2147483647 */
            );
        }

        [TestMethod]
        public void Binary_And_Eval_UInt32()
        {
            AssertEval(
                Expression.And(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 4294967295 */
            );
        }

        [TestMethod]
        public void Binary_And_Eval_NullableUInt32()
        {
            var n = Expression.Constant((uint?)null, typeof(uint?));

            AssertEval(
                Expression.And(n, n)
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 4294967295 */
            );
        }

        [TestMethod]
        public void Binary_And_Eval_Int64()
        {
            AssertEval(
                Expression.And(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 9223372036854775807 */
            );
        }

        [TestMethod]
        public void Binary_And_Eval_NullableInt64()
        {
            var n = Expression.Constant((long?)null, typeof(long?));

            AssertEval(
                Expression.And(n, n)
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 9223372036854775807 */
            );
        }

        [TestMethod]
        public void Binary_And_Eval_UInt64()
        {
            AssertEval(
                Expression.And(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 18446744073709551615 */
            );
        }

        [TestMethod]
        public void Binary_And_Eval_NullableUInt64()
        {
            var n = Expression.Constant((ulong?)null, typeof(ulong?));

            AssertEval(
                Expression.And(n, n)
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.And(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.And(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 18446744073709551615 */
            );
        }

        [TestMethod]
        public void Binary_Or_Eval_Boolean()
        {
            AssertEval(
                Expression.Or(Expression.Constant((bool)false, typeof(bool)), Expression.Constant((bool)false, typeof(bool)))
                /* false */
            );
            AssertEval(
                Expression.Or(Expression.Constant((bool)false, typeof(bool)), Expression.Constant((bool)true, typeof(bool)))
                /* true */
            );
            AssertEval(
                Expression.Or(Expression.Constant((bool)true, typeof(bool)), Expression.Constant((bool)false, typeof(bool)))
                /* true */
            );
            AssertEval(
                Expression.Or(Expression.Constant((bool)true, typeof(bool)), Expression.Constant((bool)true, typeof(bool)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_Or_Eval_NullableBoolean()
        {
            var n = Expression.Constant((bool?)null, typeof(bool?));

            AssertEval(
                Expression.Or(n, n)
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((bool?)null, typeof(bool?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((bool?)null, typeof(bool?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((bool?)false, typeof(bool?)), Expression.Constant((bool?)false, typeof(bool?)))//,
                /* false */
            );
            AssertEval(
                Expression.Or(Expression.Constant((bool?)false, typeof(bool?)), Expression.Constant((bool?)true, typeof(bool?)))//,
                /* true */
            );
            AssertEval(
                Expression.Or(Expression.Constant((bool?)null, typeof(bool?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((bool?)null, typeof(bool?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((bool?)true, typeof(bool?)), Expression.Constant((bool?)false, typeof(bool?)))//,
                /* true */
            );
            AssertEval(
                Expression.Or(Expression.Constant((bool?)true, typeof(bool?)), Expression.Constant((bool?)true, typeof(bool?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_Or_Eval_SByte()
        {
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* -128 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* -128 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* -127 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* -86 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* -128 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* 0 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* 127 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* -127 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* 127 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* -86 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* 127 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* 127 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* 127 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* 127 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* 127 */
            );
        }

        [TestMethod]
        public void Binary_Or_Eval_NullableSByte()
        {
            var n = Expression.Constant((sbyte?)null, typeof(sbyte?));

            AssertEval(
                Expression.Or(n, n)
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* -128 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* -128 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* -127 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* -86 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* -128 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* 127 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* -127 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* 127 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* -86 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* 127 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* 127 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* 127 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* 127 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* 127 */
            );
        }

        [TestMethod]
        public void Binary_Or_Eval_Byte()
        {
            AssertEval(
                Expression.Or(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* 0 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* 255 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* 255 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* 255 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* 255 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* 255 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* 255 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* 255 */
            );
        }

        [TestMethod]
        public void Binary_Or_Eval_NullableByte()
        {
            var n = Expression.Constant((byte?)null, typeof(byte?));

            AssertEval(
                Expression.Or(n, n)
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* 255 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* 255 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* 255 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* 255 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* 255 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* 255 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* 255 */
            );
        }

        [TestMethod]
        public void Binary_Or_Eval_Int16()
        {
            AssertEval(
                Expression.Or(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* -32767 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* -32726 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -32767 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -32726 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 32767 */
            );
        }

        [TestMethod]
        public void Binary_Or_Eval_NullableInt16()
        {
            var n = Expression.Constant((short?)null, typeof(short?));

            AssertEval(
                Expression.Or(n, n)
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* -32767 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* -32726 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -32767 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -32726 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 32767 */
            );
        }

        [TestMethod]
        public void Binary_Or_Eval_UInt16()
        {
            AssertEval(
                Expression.Or(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 65535 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 65535 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 65535 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 65535 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 65535 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 65535 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 65535 */
            );
        }

        [TestMethod]
        public void Binary_Or_Eval_NullableUInt16()
        {
            var n = Expression.Constant((ushort?)null, typeof(ushort?));

            AssertEval(
                Expression.Or(n, n)
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 65535 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 65535 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 65535 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 65535 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 65535 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 65535 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 65535 */
            );
        }

        [TestMethod]
        public void Binary_Or_Eval_Int32()
        {
            AssertEval(
                Expression.Or(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* -2147483647 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* -2147483606 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -2147483647 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -2147483606 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 2147483647 */
            );
        }

        [TestMethod]
        public void Binary_Or_Eval_NullableInt32()
        {
            var n = Expression.Constant((int?)null, typeof(int?));

            AssertEval(
                Expression.Or(n, n)
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* -2147483647 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* -2147483606 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -2147483647 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -2147483606 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 2147483647 */
            );
        }

        [TestMethod]
        public void Binary_Or_Eval_UInt32()
        {
            AssertEval(
                Expression.Or(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 4294967295 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 4294967295 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 4294967295 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 4294967295 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 4294967295 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 4294967295 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 4294967295 */
            );
        }

        [TestMethod]
        public void Binary_Or_Eval_NullableUInt32()
        {
            var n = Expression.Constant((uint?)null, typeof(uint?));

            AssertEval(
                Expression.Or(n, n)
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 4294967295 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 4294967295 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 4294967295 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 4294967295 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 4294967295 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 4294967295 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 4294967295 */
            );
        }

        [TestMethod]
        public void Binary_Or_Eval_Int64()
        {
            AssertEval(
                Expression.Or(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* -9223372036854775766 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -9223372036854775766 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 9223372036854775807 */
            );
        }

        [TestMethod]
        public void Binary_Or_Eval_NullableInt64()
        {
            var n = Expression.Constant((long?)null, typeof(long?));

            AssertEval(
                Expression.Or(n, n)
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* -9223372036854775766 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -9223372036854775766 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 9223372036854775807 */
            );
        }

        [TestMethod]
        public void Binary_Or_Eval_UInt64()
        {
            AssertEval(
                Expression.Or(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 18446744073709551615 */
            );
        }

        [TestMethod]
        public void Binary_Or_Eval_NullableUInt64()
        {
            var n = Expression.Constant((ulong?)null, typeof(ulong?));

            AssertEval(
                Expression.Or(n, n)
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Or(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.Or(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 18446744073709551615 */
            );
        }

        [TestMethod]
        public void Binary_ExclusiveOr_Eval_Boolean()
        {
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((bool)false, typeof(bool)), Expression.Constant((bool)false, typeof(bool)))
                /* false */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((bool)false, typeof(bool)), Expression.Constant((bool)true, typeof(bool)))
                /* true */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((bool)true, typeof(bool)), Expression.Constant((bool)false, typeof(bool)))
                /* true */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((bool)true, typeof(bool)), Expression.Constant((bool)true, typeof(bool)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_ExclusiveOr_Eval_NullableBoolean()
        {
            var n = Expression.Constant((bool?)null, typeof(bool?));

            AssertEval(
                Expression.ExclusiveOr(n, n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((bool?)null, typeof(bool?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((bool?)null, typeof(bool?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((bool?)false, typeof(bool?)), Expression.Constant((bool?)false, typeof(bool?)))//,
                /* false */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((bool?)false, typeof(bool?)), Expression.Constant((bool?)true, typeof(bool?)))//,
                /* true */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((bool?)null, typeof(bool?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((bool?)null, typeof(bool?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((bool?)true, typeof(bool?)), Expression.Constant((bool?)false, typeof(bool?)))//,
                /* true */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((bool?)true, typeof(bool?)), Expression.Constant((bool?)true, typeof(bool?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_ExclusiveOr_Eval_SByte()
        {
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* 127 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* -128 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* -127 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* -86 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* 127 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* -2 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* -43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* -128 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* -128 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* 127 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* -127 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* -2 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* 126 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* -86 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* -43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* 85 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* -128 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* 127 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* 126 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* 85 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_ExclusiveOr_Eval_NullableSByte()
        {
            var n = Expression.Constant((sbyte?)null, typeof(sbyte?));

            AssertEval(
                Expression.ExclusiveOr(n, n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* 127 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* -128 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* -127 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* -86 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* 127 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* -2 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* -43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* -128 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* -128 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* 127 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* -127 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* -2 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* 126 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* -86 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* -43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* 85 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* -128 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* 127 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* 126 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* 85 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_ExclusiveOr_Eval_Byte()
        {
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* 255 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* 254 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* 213 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* 255 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* 254 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* 213 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_ExclusiveOr_Eval_NullableByte()
        {
            var n = Expression.Constant((byte?)null, typeof(byte?));

            AssertEval(
                Expression.ExclusiveOr(n, n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* 255 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* 254 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* 213 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* 255 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* 254 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* 213 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_ExclusiveOr_Eval_Int16()
        {
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* -32767 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* -32726 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* -2 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* -43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -32767 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -2 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 32766 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -32726 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 32725 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* -32768 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* 32767 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* 32766 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* 32725 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_ExclusiveOr_Eval_NullableInt16()
        {
            var n = Expression.Constant((short?)null, typeof(short?));

            AssertEval(
                Expression.ExclusiveOr(n, n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* -32767 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* -32726 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* -2 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* -43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -32767 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -2 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 32766 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -32726 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 32725 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* -32768 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* 32767 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* 32766 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* 32725 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_ExclusiveOr_Eval_UInt16()
        {
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 65535 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 65534 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 65493 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* 65535 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* 65534 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* 65493 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_ExclusiveOr_Eval_NullableUInt16()
        {
            var n = Expression.Constant((ushort?)null, typeof(ushort?));

            AssertEval(
                Expression.ExclusiveOr(n, n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 65535 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 65534 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 65493 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* 65535 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* 65534 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* 65493 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_ExclusiveOr_Eval_Int32()
        {
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* -2147483647 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* -2147483606 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* -2 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* -43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -2147483647 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -2 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 2147483646 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -2147483606 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 2147483605 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 2147483646 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 2147483605 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_ExclusiveOr_Eval_NullableInt32()
        {
            var n = Expression.Constant((int?)null, typeof(int?));

            AssertEval(
                Expression.ExclusiveOr(n, n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* -2147483647 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* -2147483606 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* -2 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* -43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -2147483647 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -2 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 2147483646 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -2147483606 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 2147483605 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 2147483646 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 2147483605 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_ExclusiveOr_Eval_UInt32()
        {
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 4294967295 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 4294967294 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 4294967253 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* 4294967295 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* 4294967294 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* 4294967253 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_ExclusiveOr_Eval_NullableUInt32()
        {
            var n = Expression.Constant((uint?)null, typeof(uint?));

            AssertEval(
                Expression.ExclusiveOr(n, n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 4294967295 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 4294967294 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 4294967253 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* 4294967295 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* 4294967294 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* 4294967253 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_ExclusiveOr_Eval_Int64()
        {
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* -9223372036854775766 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* -2 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* -43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -2 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 9223372036854775806 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -9223372036854775766 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 9223372036854775765 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* 9223372036854775806 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* 9223372036854775765 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_ExclusiveOr_Eval_NullableInt64()
        {
            var n = Expression.Constant((long?)null, typeof(long?));

            AssertEval(
                Expression.ExclusiveOr(n, n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* -9223372036854775766 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* -2 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* -43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -9223372036854775807 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -2 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 9223372036854775806 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -9223372036854775766 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 9223372036854775765 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* -9223372036854775808 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* 9223372036854775807 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* 9223372036854775806 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* 9223372036854775765 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_ExclusiveOr_Eval_UInt64()
        {
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 18446744073709551614 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 18446744073709551573 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* 18446744073709551614 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* 18446744073709551573 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_ExclusiveOr_Eval_NullableUInt64()
        {
            var n = Expression.Constant((ulong?)null, typeof(ulong?));

            AssertEval(
                Expression.ExclusiveOr(n, n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 18446744073709551614 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 43 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 18446744073709551573 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* 18446744073709551615 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* 18446744073709551614 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* 18446744073709551573 */
            );
            AssertEval(
                Expression.ExclusiveOr(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_LeftShift_Eval_Int32()
        {
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* -2 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* -1024 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 2 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 1024 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 84 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 43008 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* -2 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* -1024 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -2147483648 */
            );
        }

        [TestMethod]
        public void Binary_LeftShift_Eval_NullableInt32()
        {
            var n = Expression.Constant((int?)null, typeof(int?));

            AssertEval(
                Expression.LeftShift(n, n)
                /* null */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.LeftShift(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.LeftShift(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* -2 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* -1024 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.LeftShift(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.LeftShift(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 2 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 1024 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.LeftShift(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 84 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 43008 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.LeftShift(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* -2 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* -1024 */
            );
            AssertEval(
                Expression.LeftShift(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -2147483648 */
            );
        }

        [TestMethod]
        public void Binary_RightShift_Eval_Int32()
        {
            AssertEval(
                Expression.RightShift(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* -2147483648 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* -1073741824 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* -2097152 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* -1 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 1 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 42 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 21 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* 2147483647 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* 1073741823 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* 2097151 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_RightShift_Eval_NullableInt32()
        {
            var n = Expression.Constant((int?)null, typeof(int?));

            AssertEval(
                Expression.RightShift(n, n)
                /* null */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.RightShift(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* -2147483648 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* -1073741824 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* -2097152 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.RightShift(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* -1 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.RightShift(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.RightShift(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 1 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.RightShift(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 42 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 21 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.RightShift(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* 0 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* 2147483647 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* 1073741823 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* 2097151 */
            );
            AssertEval(
                Expression.RightShift(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* 0 */
            );
        }

        [TestMethod]
        public void Binary_LessThan_Eval_SByte()
        {
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_LessThan_Eval_NullableSByte()
        {
            var n = Expression.Constant((sbyte?)null, typeof(sbyte?));

            AssertEval(
                Expression.LessThan(n, n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_LessThan_Eval_Byte()
        {
            AssertEval(
                Expression.LessThan(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_LessThan_Eval_NullableByte()
        {
            var n = Expression.Constant((byte?)null, typeof(byte?));

            AssertEval(
                Expression.LessThan(n, n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_LessThan_Eval_Int16()
        {
            AssertEval(
                Expression.LessThan(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_LessThan_Eval_NullableInt16()
        {
            var n = Expression.Constant((short?)null, typeof(short?));

            AssertEval(
                Expression.LessThan(n, n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_LessThan_Eval_UInt16()
        {
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_LessThan_Eval_NullableUInt16()
        {
            var n = Expression.Constant((ushort?)null, typeof(ushort?));

            AssertEval(
                Expression.LessThan(n, n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_LessThan_Eval_Int32()
        {
            AssertEval(
                Expression.LessThan(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_LessThan_Eval_NullableInt32()
        {
            var n = Expression.Constant((int?)null, typeof(int?));

            AssertEval(
                Expression.LessThan(n, n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_LessThan_Eval_UInt32()
        {
            AssertEval(
                Expression.LessThan(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_LessThan_Eval_NullableUInt32()
        {
            var n = Expression.Constant((uint?)null, typeof(uint?));

            AssertEval(
                Expression.LessThan(n, n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_LessThan_Eval_Int64()
        {
            AssertEval(
                Expression.LessThan(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_LessThan_Eval_NullableInt64()
        {
            var n = Expression.Constant((long?)null, typeof(long?));

            AssertEval(
                Expression.LessThan(n, n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_LessThan_Eval_UInt64()
        {
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_LessThan_Eval_NullableUInt64()
        {
            var n = Expression.Constant((ulong?)null, typeof(ulong?));

            AssertEval(
                Expression.LessThan(n, n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_LessThan_Eval_Single()
        {
            AssertEval(
                Expression.LessThan(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_LessThan_Eval_NullableSingle()
        {
            var n = Expression.Constant((float?)null, typeof(float?));

            AssertEval(
                Expression.LessThan(n, n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_LessThan_Eval_Double()
        {
            AssertEval(
                Expression.LessThan(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_LessThan_Eval_NullableDouble()
        {
            var n = Expression.Constant((double?)null, typeof(double?));

            AssertEval(
                Expression.LessThan(n, n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThan(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThan(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_LessThanOrEqual_Eval_SByte()
        {
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_LessThanOrEqual_Eval_NullableSByte()
        {
            var n = Expression.Constant((sbyte?)null, typeof(sbyte?));

            AssertEval(
                Expression.LessThanOrEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_LessThanOrEqual_Eval_Byte()
        {
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_LessThanOrEqual_Eval_NullableByte()
        {
            var n = Expression.Constant((byte?)null, typeof(byte?));

            AssertEval(
                Expression.LessThanOrEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_LessThanOrEqual_Eval_Int16()
        {
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_LessThanOrEqual_Eval_NullableInt16()
        {
            var n = Expression.Constant((short?)null, typeof(short?));

            AssertEval(
                Expression.LessThanOrEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_LessThanOrEqual_Eval_UInt16()
        {
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_LessThanOrEqual_Eval_NullableUInt16()
        {
            var n = Expression.Constant((ushort?)null, typeof(ushort?));

            AssertEval(
                Expression.LessThanOrEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_LessThanOrEqual_Eval_Int32()
        {
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_LessThanOrEqual_Eval_NullableInt32()
        {
            var n = Expression.Constant((int?)null, typeof(int?));

            AssertEval(
                Expression.LessThanOrEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_LessThanOrEqual_Eval_UInt32()
        {
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_LessThanOrEqual_Eval_NullableUInt32()
        {
            var n = Expression.Constant((uint?)null, typeof(uint?));

            AssertEval(
                Expression.LessThanOrEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_LessThanOrEqual_Eval_Int64()
        {
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_LessThanOrEqual_Eval_NullableInt64()
        {
            var n = Expression.Constant((long?)null, typeof(long?));

            AssertEval(
                Expression.LessThanOrEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_LessThanOrEqual_Eval_UInt64()
        {
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_LessThanOrEqual_Eval_NullableUInt64()
        {
            var n = Expression.Constant((ulong?)null, typeof(ulong?));

            AssertEval(
                Expression.LessThanOrEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_LessThanOrEqual_Eval_Single()
        {
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_LessThanOrEqual_Eval_NullableSingle()
        {
            var n = Expression.Constant((float?)null, typeof(float?));

            AssertEval(
                Expression.LessThanOrEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_LessThanOrEqual_Eval_Double()
        {
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_LessThanOrEqual_Eval_NullableDouble()
        {
            var n = Expression.Constant((double?)null, typeof(double?));

            AssertEval(
                Expression.LessThanOrEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.LessThanOrEqual(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_GreaterThan_Eval_SByte()
        {
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_GreaterThan_Eval_NullableSByte()
        {
            var n = Expression.Constant((sbyte?)null, typeof(sbyte?));

            AssertEval(
                Expression.GreaterThan(n, n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_GreaterThan_Eval_Byte()
        {
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_GreaterThan_Eval_NullableByte()
        {
            var n = Expression.Constant((byte?)null, typeof(byte?));

            AssertEval(
                Expression.GreaterThan(n, n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_GreaterThan_Eval_Int16()
        {
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_GreaterThan_Eval_NullableInt16()
        {
            var n = Expression.Constant((short?)null, typeof(short?));

            AssertEval(
                Expression.GreaterThan(n, n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_GreaterThan_Eval_UInt16()
        {
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_GreaterThan_Eval_NullableUInt16()
        {
            var n = Expression.Constant((ushort?)null, typeof(ushort?));

            AssertEval(
                Expression.GreaterThan(n, n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_GreaterThan_Eval_Int32()
        {
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_GreaterThan_Eval_NullableInt32()
        {
            var n = Expression.Constant((int?)null, typeof(int?));

            AssertEval(
                Expression.GreaterThan(n, n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_GreaterThan_Eval_UInt32()
        {
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_GreaterThan_Eval_NullableUInt32()
        {
            var n = Expression.Constant((uint?)null, typeof(uint?));

            AssertEval(
                Expression.GreaterThan(n, n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_GreaterThan_Eval_Int64()
        {
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_GreaterThan_Eval_NullableInt64()
        {
            var n = Expression.Constant((long?)null, typeof(long?));

            AssertEval(
                Expression.GreaterThan(n, n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_GreaterThan_Eval_UInt64()
        {
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_GreaterThan_Eval_NullableUInt64()
        {
            var n = Expression.Constant((ulong?)null, typeof(ulong?));

            AssertEval(
                Expression.GreaterThan(n, n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_GreaterThan_Eval_Single()
        {
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_GreaterThan_Eval_NullableSingle()
        {
            var n = Expression.Constant((float?)null, typeof(float?));

            AssertEval(
                Expression.GreaterThan(n, n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_GreaterThan_Eval_Double()
        {
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_GreaterThan_Eval_NullableDouble()
        {
            var n = Expression.Constant((double?)null, typeof(double?));

            AssertEval(
                Expression.GreaterThan(n, n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThan(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_GreaterThanOrEqual_Eval_SByte()
        {
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_GreaterThanOrEqual_Eval_NullableSByte()
        {
            var n = Expression.Constant((sbyte?)null, typeof(sbyte?));

            AssertEval(
                Expression.GreaterThanOrEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_GreaterThanOrEqual_Eval_Byte()
        {
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_GreaterThanOrEqual_Eval_NullableByte()
        {
            var n = Expression.Constant((byte?)null, typeof(byte?));

            AssertEval(
                Expression.GreaterThanOrEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_GreaterThanOrEqual_Eval_Int16()
        {
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_GreaterThanOrEqual_Eval_NullableInt16()
        {
            var n = Expression.Constant((short?)null, typeof(short?));

            AssertEval(
                Expression.GreaterThanOrEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_GreaterThanOrEqual_Eval_UInt16()
        {
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_GreaterThanOrEqual_Eval_NullableUInt16()
        {
            var n = Expression.Constant((ushort?)null, typeof(ushort?));

            AssertEval(
                Expression.GreaterThanOrEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_GreaterThanOrEqual_Eval_Int32()
        {
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_GreaterThanOrEqual_Eval_NullableInt32()
        {
            var n = Expression.Constant((int?)null, typeof(int?));

            AssertEval(
                Expression.GreaterThanOrEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_GreaterThanOrEqual_Eval_UInt32()
        {
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_GreaterThanOrEqual_Eval_NullableUInt32()
        {
            var n = Expression.Constant((uint?)null, typeof(uint?));

            AssertEval(
                Expression.GreaterThanOrEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_GreaterThanOrEqual_Eval_Int64()
        {
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_GreaterThanOrEqual_Eval_NullableInt64()
        {
            var n = Expression.Constant((long?)null, typeof(long?));

            AssertEval(
                Expression.GreaterThanOrEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_GreaterThanOrEqual_Eval_UInt64()
        {
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_GreaterThanOrEqual_Eval_NullableUInt64()
        {
            var n = Expression.Constant((ulong?)null, typeof(ulong?));

            AssertEval(
                Expression.GreaterThanOrEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_GreaterThanOrEqual_Eval_Single()
        {
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_GreaterThanOrEqual_Eval_NullableSingle()
        {
            var n = Expression.Constant((float?)null, typeof(float?));

            AssertEval(
                Expression.GreaterThanOrEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_GreaterThanOrEqual_Eval_Double()
        {
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_GreaterThanOrEqual_Eval_NullableDouble()
        {
            var n = Expression.Constant((double?)null, typeof(double?));

            AssertEval(
                Expression.GreaterThanOrEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.GreaterThanOrEqual(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_Equal_Eval_Boolean()
        {
            AssertEval(
                Expression.Equal(Expression.Constant((bool)false, typeof(bool)), Expression.Constant((bool)false, typeof(bool)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((bool)false, typeof(bool)), Expression.Constant((bool)true, typeof(bool)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((bool)true, typeof(bool)), Expression.Constant((bool)false, typeof(bool)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((bool)true, typeof(bool)), Expression.Constant((bool)true, typeof(bool)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_Equal_Eval_NullableBoolean()
        {
            var n = Expression.Constant((bool?)null, typeof(bool?));

            AssertEval(
                Expression.Equal(n, n)
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((bool?)null, typeof(bool?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((bool?)null, typeof(bool?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((bool?)false, typeof(bool?)), Expression.Constant((bool?)false, typeof(bool?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((bool?)false, typeof(bool?)), Expression.Constant((bool?)true, typeof(bool?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((bool?)null, typeof(bool?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((bool?)null, typeof(bool?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((bool?)true, typeof(bool?)), Expression.Constant((bool?)false, typeof(bool?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((bool?)true, typeof(bool?)), Expression.Constant((bool?)true, typeof(bool?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_Equal_Eval_SByte()
        {
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_Equal_Eval_NullableSByte()
        {
            var n = Expression.Constant((sbyte?)null, typeof(sbyte?));

            AssertEval(
                Expression.Equal(n, n)
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_Equal_Eval_Byte()
        {
            AssertEval(
                Expression.Equal(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_Equal_Eval_NullableByte()
        {
            var n = Expression.Constant((byte?)null, typeof(byte?));

            AssertEval(
                Expression.Equal(n, n)
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_Equal_Eval_Int16()
        {
            AssertEval(
                Expression.Equal(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_Equal_Eval_NullableInt16()
        {
            var n = Expression.Constant((short?)null, typeof(short?));

            AssertEval(
                Expression.Equal(n, n)
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_Equal_Eval_UInt16()
        {
            AssertEval(
                Expression.Equal(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_Equal_Eval_NullableUInt16()
        {
            var n = Expression.Constant((ushort?)null, typeof(ushort?));

            AssertEval(
                Expression.Equal(n, n)
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_Equal_Eval_Int32()
        {
            AssertEval(
                Expression.Equal(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_Equal_Eval_NullableInt32()
        {
            var n = Expression.Constant((int?)null, typeof(int?));

            AssertEval(
                Expression.Equal(n, n)
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_Equal_Eval_UInt32()
        {
            AssertEval(
                Expression.Equal(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_Equal_Eval_NullableUInt32()
        {
            var n = Expression.Constant((uint?)null, typeof(uint?));

            AssertEval(
                Expression.Equal(n, n)
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_Equal_Eval_Int64()
        {
            AssertEval(
                Expression.Equal(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_Equal_Eval_NullableInt64()
        {
            var n = Expression.Constant((long?)null, typeof(long?));

            AssertEval(
                Expression.Equal(n, n)
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_Equal_Eval_UInt64()
        {
            AssertEval(
                Expression.Equal(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_Equal_Eval_NullableUInt64()
        {
            var n = Expression.Constant((ulong?)null, typeof(ulong?));

            AssertEval(
                Expression.Equal(n, n)
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_Equal_Eval_Single()
        {
            AssertEval(
                Expression.Equal(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_Equal_Eval_NullableSingle()
        {
            var n = Expression.Constant((float?)null, typeof(float?));

            AssertEval(
                Expression.Equal(n, n)
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_Equal_Eval_Double()
        {
            AssertEval(
                Expression.Equal(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* true */
            );
        }

        [TestMethod]
        public void Binary_Equal_Eval_NullableDouble()
        {
            var n = Expression.Constant((double?)null, typeof(double?));

            AssertEval(
                Expression.Equal(n, n)
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.Equal(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.Equal(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* true */
            );
        }

        [TestMethod]
        public void Binary_NotEqual_Eval_Boolean()
        {
            AssertEval(
                Expression.NotEqual(Expression.Constant((bool)false, typeof(bool)), Expression.Constant((bool)false, typeof(bool)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((bool)false, typeof(bool)), Expression.Constant((bool)true, typeof(bool)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((bool)true, typeof(bool)), Expression.Constant((bool)false, typeof(bool)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((bool)true, typeof(bool)), Expression.Constant((bool)true, typeof(bool)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_NotEqual_Eval_NullableBoolean()
        {
            var n = Expression.Constant((bool?)null, typeof(bool?));

            AssertEval(
                Expression.NotEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((bool?)null, typeof(bool?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((bool?)null, typeof(bool?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((bool?)false, typeof(bool?)), Expression.Constant((bool?)false, typeof(bool?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((bool?)false, typeof(bool?)), Expression.Constant((bool?)true, typeof(bool?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((bool?)null, typeof(bool?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((bool?)null, typeof(bool?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((bool?)true, typeof(bool?)), Expression.Constant((bool?)false, typeof(bool?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((bool?)true, typeof(bool?)), Expression.Constant((bool?)true, typeof(bool?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_NotEqual_Eval_SByte()
        {
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)-128, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)-1, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)0, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)1, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)42, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)-128, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)-1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)0, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)1, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)42, typeof(sbyte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte)127, typeof(sbyte)), Expression.Constant((sbyte)127, typeof(sbyte)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_NotEqual_Eval_NullableSByte()
        {
            var n = Expression.Constant((sbyte?)null, typeof(sbyte?));

            AssertEval(
                Expression.NotEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)-128, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)-1, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)0, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)1, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)42, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)null, typeof(sbyte?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((sbyte?)null, typeof(sbyte?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)-128, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)-1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)0, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)1, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)42, typeof(sbyte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((sbyte?)127, typeof(sbyte?)), Expression.Constant((sbyte?)127, typeof(sbyte?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_NotEqual_Eval_Byte()
        {
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte)0, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte)1, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte)42, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)0, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)1, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)42, typeof(byte)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte)255, typeof(byte)), Expression.Constant((byte)255, typeof(byte)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_NotEqual_Eval_NullableByte()
        {
            var n = Expression.Constant((byte?)null, typeof(byte?));

            AssertEval(
                Expression.NotEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte?)0, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte?)1, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte?)42, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte?)null, typeof(byte?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((byte?)null, typeof(byte?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)0, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)1, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)42, typeof(byte?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((byte?)255, typeof(byte?)), Expression.Constant((byte?)255, typeof(byte?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_NotEqual_Eval_Int16()
        {
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)-32768, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)-1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)0, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)1, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)42, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-32768, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)-1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)0, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)1, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)42, typeof(short)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short)32767, typeof(short)), Expression.Constant((short)32767, typeof(short)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_NotEqual_Eval_NullableInt16()
        {
            var n = Expression.Constant((short?)null, typeof(short?));

            AssertEval(
                Expression.NotEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)-32768, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)-1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)0, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)1, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)42, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)null, typeof(short?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((short?)null, typeof(short?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-32768, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)-1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)0, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)1, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)42, typeof(short?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((short?)32767, typeof(short?)), Expression.Constant((short?)32767, typeof(short?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_NotEqual_Eval_UInt16()
        {
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort)0, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort)1, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort)42, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)0, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)1, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)42, typeof(ushort)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort)65535, typeof(ushort)), Expression.Constant((ushort)65535, typeof(ushort)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_NotEqual_Eval_NullableUInt16()
        {
            var n = Expression.Constant((ushort?)null, typeof(ushort?));

            AssertEval(
                Expression.NotEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort?)0, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort?)1, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort?)42, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort?)null, typeof(ushort?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((ushort?)null, typeof(ushort?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)0, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)1, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)42, typeof(ushort?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ushort?)65535, typeof(ushort?)), Expression.Constant((ushort?)65535, typeof(ushort?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_NotEqual_Eval_Int32()
        {
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)-2147483648, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)-1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)0, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)1, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)42, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-2147483648, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)-1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)0, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)1, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)42, typeof(int)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int)2147483647, typeof(int)), Expression.Constant((int)2147483647, typeof(int)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_NotEqual_Eval_NullableInt32()
        {
            var n = Expression.Constant((int?)null, typeof(int?));

            AssertEval(
                Expression.NotEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)-2147483648, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)-1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)0, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)1, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)42, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)null, typeof(int?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((int?)null, typeof(int?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-2147483648, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)-1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)0, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)1, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)42, typeof(int?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((int?)2147483647, typeof(int?)), Expression.Constant((int?)2147483647, typeof(int?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_NotEqual_Eval_UInt32()
        {
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint)0, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint)1, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint)42, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)0, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)1, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)42, typeof(uint)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint)4294967295, typeof(uint)), Expression.Constant((uint)4294967295, typeof(uint)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_NotEqual_Eval_NullableUInt32()
        {
            var n = Expression.Constant((uint?)null, typeof(uint?));

            AssertEval(
                Expression.NotEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint?)0, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint?)1, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint?)42, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint?)null, typeof(uint?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((uint?)null, typeof(uint?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)0, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)1, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)42, typeof(uint?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((uint?)4294967295, typeof(uint?)), Expression.Constant((uint?)4294967295, typeof(uint?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_NotEqual_Eval_Int64()
        {
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)-9223372036854775808, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)-1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)0, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)1, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)42, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-9223372036854775808, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)-1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)0, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)1, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)42, typeof(long)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long)9223372036854775807, typeof(long)), Expression.Constant((long)9223372036854775807, typeof(long)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_NotEqual_Eval_NullableInt64()
        {
            var n = Expression.Constant((long?)null, typeof(long?));

            AssertEval(
                Expression.NotEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)-9223372036854775808, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)-1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)0, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)1, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)42, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)null, typeof(long?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((long?)null, typeof(long?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-9223372036854775808, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)-1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)0, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)1, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)42, typeof(long?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((long?)9223372036854775807, typeof(long?)), Expression.Constant((long?)9223372036854775807, typeof(long?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_NotEqual_Eval_UInt64()
        {
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong)0, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong)1, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong)42, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)0, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)1, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)42, typeof(ulong)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong)18446744073709551615, typeof(ulong)), Expression.Constant((ulong)18446744073709551615, typeof(ulong)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_NotEqual_Eval_NullableUInt64()
        {
            var n = Expression.Constant((ulong?)null, typeof(ulong?));

            AssertEval(
                Expression.NotEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong?)0, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong?)1, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong?)42, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong?)null, typeof(ulong?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((ulong?)null, typeof(ulong?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)0, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)1, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)42, typeof(ulong?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)), Expression.Constant((ulong?)18446744073709551615, typeof(ulong?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_NotEqual_Eval_Single()
        {
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)0, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)1, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)3.14, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.MinValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.MaxValue, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.NaN, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.NegativeInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)0, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)1, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)3.14, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MinValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.MaxValue, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NaN, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.NegativeInfinity, typeof(float)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float)float.PositiveInfinity, typeof(float)), Expression.Constant((float)float.PositiveInfinity, typeof(float)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_NotEqual_Eval_NullableSingle()
        {
            var n = Expression.Constant((float?)null, typeof(float?));

            AssertEval(
                Expression.NotEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)0, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)1, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)3.14, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.MinValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.MaxValue, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.NaN, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.NegativeInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)null, typeof(float?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((float?)null, typeof(float?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)0, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)1, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)3.14, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MinValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.MaxValue, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NaN, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.NegativeInfinity, typeof(float?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((float?)float.PositiveInfinity, typeof(float?)), Expression.Constant((float?)float.PositiveInfinity, typeof(float?)))//,
                /* false */
            );
        }

        [TestMethod]
        public void Binary_NotEqual_Eval_Double()
        {
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)0, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)1, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)3.14, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.MinValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.MaxValue, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.NaN, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.NegativeInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)0, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)1, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)3.14, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MinValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.MaxValue, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NaN, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.NegativeInfinity, typeof(double)))
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double)double.PositiveInfinity, typeof(double)), Expression.Constant((double)double.PositiveInfinity, typeof(double)))
                /* false */
            );
        }

        [TestMethod]
        public void Binary_NotEqual_Eval_NullableDouble()
        {
            var n = Expression.Constant((double?)null, typeof(double?));

            AssertEval(
                Expression.NotEqual(n, n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)0, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)1, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)3.14, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.MinValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.MaxValue, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.NaN, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* false */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.NegativeInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)null, typeof(double?)), n)
                /* null */
            );
            AssertEval(
                Expression.NotEqual(n, Expression.Constant((double?)null, typeof(double?)))
                /* null */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)0, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)1, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)3.14, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MinValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.MaxValue, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NaN, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.NegativeInfinity, typeof(double?)))//,
                /* true */
            );
            AssertEval(
                Expression.NotEqual(Expression.Constant((double?)double.PositiveInfinity, typeof(double?)), Expression.Constant((double?)double.PositiveInfinity, typeof(double?)))//,
                /* false */
            );
        }

    }
}
