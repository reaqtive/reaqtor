// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT License.
// See the LICENSE file in the project root for more information.

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Reflection;

namespace System.Linq.Expressions
{
<#
int N = 5;

for (var i = 1; i <= N; i++)
{
    var args = string.Join(", ", Enumerable.Range(0, i).Select(j => "ExpressionSlim arg" + j));
#>
    internal sealed class InstanceMethodCallExpressionSlim<#=i#> : InstanceMethodCallExpressionSlim
    {
        private object _arg0;
<#
for (var j = 1; j < i; j++)
{
#>
        private readonly ExpressionSlim _arg<#=j#>;
<#
}
#>

        public InstanceMethodCallExpressionSlim<#=i#>(ExpressionSlim @object, MethodInfoSlim method, <#=args#>)
            : base(@object, method)
        {
<#
for (var j = 0; j < i; j++)
{
#>
            _arg<#=j#> = arg<#=j#>;
<#
}
#>
        }

        public override int ArgumentCount => <#=i#>;

        public override ExpressionSlim GetArgument(int index)
        {
            switch (index)
            {
                case 0:
                    return ReturnObject<ExpressionSlim>(_arg0);
<#
for (var j = 1; j < i; j++)
{
#>
                case <#=j#>:
                    return _arg<#=j#>;
<#
}
#>
                default:
                    throw new ArgumentOutOfRangeException(nameof(index));
            }
        }

        protected override ReadOnlyCollection<ExpressionSlim> GetOrMakeArguments()
        {
            return ReturnReadOnly(this, ref _arg0);
        }

        internal override MethodCallExpressionSlim Rewrite(ExpressionSlim instance, IList<ExpressionSlim> args)
        {
<#
var newArgs = string.Join(", ", Enumerable.Range(0, i).Select(j => "args[" + j + "]"));
var oldArgs = string.Join(", ", new[] { "ReturnObject<ExpressionSlim>(_arg0)" }.Concat(Enumerable.Range(1, i - 1).Select(j => "_arg" + j)));
#>
            Debug.Assert(instance != null);
            Debug.Assert(args == null || args.Count == <#=i#>);

            if (args != null)
            {
                return ExpressionSlim.Call(instance, Method, <#=newArgs#>);
            }
            else
            {
                return ExpressionSlim.Call(instance, Method, <#=oldArgs#>);
            }
        }
    }

    internal sealed class StaticMethodCallExpressionSlim<#=i#> : StaticMethodCallExpressionSlim
    {
        private object _arg0;
<#
for (var j = 1; j < i; j++)
{
#>
        private readonly ExpressionSlim _arg<#=j#>;
<#
}
#>

        public StaticMethodCallExpressionSlim<#=i#>(MethodInfoSlim method, <#=args#>)
            : base(method)
        {
<#
for (var j = 0; j < i; j++)
{
#>
            _arg<#=j#> = arg<#=j#>;
<#
}
#>
        }

        public override int ArgumentCount => <#=i#>;

        public override ExpressionSlim GetArgument(int index)
        {
            switch (index)
            {
                case 0:
                    return ReturnObject<ExpressionSlim>(_arg0);
<#
for (var j = 1; j < i; j++)
{
#>
                case <#=j#>:
                    return _arg<#=j#>;
<#
}
#>
                default:
                    throw new ArgumentOutOfRangeException(nameof(index));
            }
        }

        protected override ReadOnlyCollection<ExpressionSlim> GetOrMakeArguments()
        {
            return ReturnReadOnly(this, ref _arg0);
        }

        internal override MethodCallExpressionSlim Rewrite(ExpressionSlim instance, IList<ExpressionSlim> args)
        {
<#
newArgs = string.Join(", ", Enumerable.Range(0, i).Select(j => "args[" + j + "]"));
oldArgs = string.Join(", ", new[] { "ReturnObject<ExpressionSlim>(_arg0)" }.Concat(Enumerable.Range(1, i - 1).Select(j => "_arg" + j)));
#>
            Debug.Assert(instance == null);
            Debug.Assert(args != null);
            Debug.Assert(args.Count == <#=i#>);

            // NB: We don't protect against a visitor that returns a non-null value for Visit(node.Object)
            //     when the original node.Object was null for a static call. This already breaks the assert
            //     higher up and will result in a NullReferenceException here (just like in LINQ ET).

            return ExpressionSlim.Call(Method, <#=newArgs#>);
        }
    }

<#
}
#>
#pragma warning disable 1591
    partial class ExpressionSlim
    {
<#
for (var i = 0; i <= N; i++)
{
    var pars = string.Join(", ", new[] { "ExpressionSlim instance", "MethodInfoSlim method" }.Concat(Enumerable.Range(0, i).Select(j => "ExpressionSlim arg" + j)));
    var args = string.Join(", ", new[] { "instance, method" }.Concat(Enumerable.Range(0, i).Select(j => "arg" + j)));
    var staticArgs = string.Join(", ", new[] { "method" }.Concat(Enumerable.Range(0, i).Select(j => "arg" + j)));
#>
        public static MethodCallExpressionSlim Call(<#=pars#>)
        {
            Require(method, nameof(method));
<#
for (var j = 0; j < i; j++)
{
#>
            Require(arg<#=j#>, nameof(arg<#=j#>));
<#
}
#>

            if (instance == null)
            {
                return new StaticMethodCallExpressionSlim<#=i#>(<#=staticArgs#>);
            }
            else
            {
                return new InstanceMethodCallExpressionSlim<#=i#>(<#=args#>);
            }
        }

<#
}

for (var i = 0; i <= N; i++)
{
    var staticPars = string.Join(", ", new[] { "MethodInfoSlim method" }.Concat(Enumerable.Range(0, i).Select(j => "ExpressionSlim arg" + j)));
    var staticArgs = string.Join(", ", new[] { "method" }.Concat(Enumerable.Range(0, i).Select(j => "arg" + j)));
#>
        public static MethodCallExpressionSlim Call(<#=staticPars#>)
        {
            Require(method, nameof(method));
<#
for (var j = 0; j < i; j++)
{
#>
            Require(arg<#=j#>, nameof(arg<#=j#>));
<#
}
#>

            return new StaticMethodCallExpressionSlim<#=i#>(<#=staticArgs#>);
        }

<#
}
#>
    }

    partial class ExpressionSlimUnsafe
    {
<#
for (var i = 0; i <= N; i++)
{
    var pars = string.Join(", ", new[] { "ExpressionSlim instance", "MethodInfoSlim method" }.Concat(Enumerable.Range(0, i).Select(j => "ExpressionSlim arg" + j)));
    var args = string.Join(", ", new[] { "instance, method" }.Concat(Enumerable.Range(0, i).Select(j => "arg" + j)));
    var staticArgs = string.Join(", ", new[] { "method" }.Concat(Enumerable.Range(0, i).Select(j => "arg" + j)));
#>
        public static MethodCallExpressionSlim Call(<#=pars#>)
        {
            if (instance == null)
            {
                return new StaticMethodCallExpressionSlim<#=i#>(<#=staticArgs#>);
            }
            else
            {
                return new InstanceMethodCallExpressionSlim<#=i#>(<#=args#>);
            }
        }

<#
}

for (var i = 0; i <= N; i++)
{
    var staticPars = string.Join(", ", new[] { "MethodInfoSlim method" }.Concat(Enumerable.Range(0, i).Select(j => "ExpressionSlim arg" + j)));
    var staticArgs = string.Join(", ", new[] { "method" }.Concat(Enumerable.Range(0, i).Select(j => "arg" + j)));
#>
        public static MethodCallExpressionSlim Call(<#=staticPars#>)
        {
            return new StaticMethodCallExpressionSlim<#=i#>(<#=staticArgs#>);
        }

<#
}
#>
    }
#pragma warning restore
}
