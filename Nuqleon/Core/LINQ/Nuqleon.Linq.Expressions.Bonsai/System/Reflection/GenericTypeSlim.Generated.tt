// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT License.
// See the LICENSE file in the project root for more information.

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System.Diagnostics;

namespace System.Reflection
{
<#
// TODO: Move to ReturnReadOnly and ReturnObject strategy instead.

for (var i = 1; i <= 4; i++)
{
    var args = string.Join(", ", Enumerable.Range(1, i).Select(j => "TypeSlim argument" + j));
#>
    internal sealed class GenericTypeSlim<#=i#> : GenericTypeSlimN
    {
<#
for (var j = 2; j <= i; j++)
{
#>
        private readonly TypeSlim _argument<#=j#>;
<#
}
#>

        internal GenericTypeSlim<#=i#>(GenericDefinitionTypeSlim typeDefinition, <#=args#>)
            : base(typeDefinition, argument1)
        {
<#
for (var j = 2; j <= i; j++)
{
#>
            _argument<#=j#> = argument<#=j#>;
<#
}
#>
        }

        public override int GenericArgumentCount => <#=i#>;

        public override TypeSlim GetGenericArgument(int index)
        {
            switch (index)
            {
                case 0:
                    return Argument1;
<#
for (var j = 2; j <= i; j++)
{
#>
                case <#=j - 1#>:
                    return _argument<#=j#>;
<#
}
#>
                default:
                    throw new ArgumentOutOfRangeException(nameof(index));
            }
        }

        protected override TypeSlim[] Pack(TypeSlim argument1) => new TypeSlim[] { <#=string.Join(", ", new[] { "argument1" }.Concat(Enumerable.Range(2, i - 1).Select(j => "_argument" + j)))#> };

        internal override GenericTypeSlim Rewrite(GenericDefinitionTypeSlim typeDefinition, TypeSlim[] arguments)
        {
            Debug.Assert(typeDefinition != null);
            Debug.Assert(arguments == null || arguments.Length == <#=i#>);

            if (arguments == null)
            {
                return TypeSlim.Generic(typeDefinition, <#=string.Join(", ", new[] { "Argument1" }.Concat(Enumerable.Range(2, i - 1).Select(j => "_argument" + j)))#>);
            }
            else
            {
                return TypeSlim.Generic(typeDefinition, <#=string.Join(", ", Enumerable.Range(0, i).Select(j => "arguments[" + j + "]"))#>);
            }
        }
    }

<#
}
#>
}
