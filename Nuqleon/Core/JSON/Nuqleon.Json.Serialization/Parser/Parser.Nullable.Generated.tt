// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT License.
// See the LICENSE file in the project root for more information.

//
// Revision history:
//
//   BD - 04/05/2016 - Created fast JSON deserializer functionality.
//   BD - 05/08/2016 - Added support for deserialization from text readers.
//

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using Nuqleon.Json.Parser;
using System;
using System.Globalization;

namespace Nuqleon.Json.Serialization
{
    internal partial class Parser
    {
<#
var ts = new[] { typeof(sbyte), typeof(short), typeof(int), typeof(long), typeof(byte), typeof(ushort), typeof(uint), typeof(ulong), typeof(bool), typeof(char), typeof(DateTime), typeof(DateTimeOffset), typeof(float), typeof(double), typeof(decimal) };

foreach (var t in ts)
{
    var tn = t.Name;
    var jsonKind = "";

    if (t == typeof(bool)) jsonKind = "Boolean";
    else if (t == typeof(char) || t == typeof(DateTime) || t == typeof(DateTimeOffset) || t == typeof(TimeSpan) || t == typeof(Uri)) jsonKind = "String";
    else jsonKind = "Number";

    if (t.IsValueType)
    {
#>
        /// <summary>
        /// Lexes and parses a JSON <#=jsonKind#> as a nullable <#=t.FullName#> in the specified string starting from the specified index.
        /// </summary>
        /// <param name="str">The string to lex and parse a <#=jsonKind#> from.</param>
        /// <param name="len">The length of the string.</param>
        /// <param name="i">The index in the string to start lexing from. This value gets updated to the first index position after the <#=jsonKind#>, if found.</param>
        /// <param name="context">The parser context.</param>
        /// <returns>A <#=t.FullName#> value or null, if found; otherwise, a ParseException is thrown.</returns>
        /// <remarks>
        /// This method does not consume whitespace; the character at the specified start index in the string is expected to be the start of a valid JSON <#=jsonKind#> or a JSON null literal.
        /// JSON null literals are case-sensitive.
        /// </remarks>
        internal static <#=tn#>? ParseNullable<#=tn#>(string str, int len, ref int i, ParserContext context)
        {
            var b = i;

#if ALLOW_UNSAFE
            if (i + 4 <= len)
            {
                unsafe
                {
                    const long NULL = ((long)'n' << 0) | ((long)'u' << 16) | ((long)'l' << 32) | ((long)'l' << 48);

                    fixed (char* s = str)
                    {
                        var c = s + i;
                
                        if (*((long*)c) == NULL)
                        {
                            i += 4;
                            return null;
                        }
                    }
                }
            }

            if (i < len)
            {
                return Parse<#=tn#>(str, len, ref i, context);
            }
#else
            if (i < len)
            {
                if (str[i] == 'n')
                {
                    if (TryParseNullSkipN(str, len, ref i))
                    {
                        return null;
                    }
                }
                else
                {
                    return Parse<#=tn#>(str, len, ref i, context);
                }
            }
#endif
            throw new ParseException(string.Format(CultureInfo.InvariantCulture, "Expected {0} or null at position '{1}'.", typeof(<#=tn#>).Name, b), b, ParseError.InvalidToken);
        }

#if !NO_IO
        /// <summary>
        /// Lexes and parses a JSON <#=jsonKind#> as a nullable <#=t.FullName#> in the specified text reader.
        /// </summary>
        /// <param name="reader">The text reader to lex and parse a <#=jsonKind#> from.</param>
        /// <param name="context">The parser context.</param>
        /// <returns>A <#=t.FullName#> value or null, if found; otherwise, a ParseException is thrown.</returns>
        /// <remarks>
        /// This method does not consume whitespace; the character at the specified start index in the string is expected to be the start of a valid JSON <#=jsonKind#> or a JSON null literal.
        /// JSON null literals are case-sensitive.
        /// </remarks>
        internal static <#=tn#>? ParseNullable<#=tn#>(System.IO.TextReader reader, ParserContext context)
        {
            var c = reader.Peek();

            if (c == 'n')
            {
#if ALLOW_UNSAFE
                if (reader.Read(context.char4, 0, 4) == 4)
                {
                    unsafe
                    {
                        const long NULL = ((long)'n' << 0) | ((long)'u' << 16) | ((long)'l' << 32) | ((long)'l' << 48);

                        fixed (char* s = context.char4) // COVERAGE: Code coverage is partial on the fixed statement due to emitted null checks that can never be hit.
                        {
                            var val = *((long*)s);

                            if (val == NULL)
                            {
                                return null;
                            }
                        }
                    }
                }
#else
                if (TryParseNullSkipN(reader, context))
                {
                    return null;
                }
#endif

                throw new ParseException(string.Format(CultureInfo.InvariantCulture, "Expected {0} or null.", typeof(<#=tn#>).Name), -1, ParseError.InvalidToken);
            }
            else
            {
                return Parse<#=tn#>(reader, context);
            }
        }
#endif

<#
    }
}
#>
    }
}
