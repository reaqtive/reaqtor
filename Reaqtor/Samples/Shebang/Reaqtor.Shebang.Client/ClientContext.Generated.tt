// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT License.
// See the LICENSE file in the project root for more information.

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(ProjectDir)\..\..\..\..\Reaqtive\Core\Reaqtive.Interfaces\bin\$(Configuration)\net472\Reaqtive.Interfaces.dll" #>
<#@ assembly name="$(ProjectDir)\..\..\..\..\Reaqtive\Core\Reaqtive.Core\bin\$(Configuration)\net472\Reaqtive.Core.dll" #>
<#@ assembly name="$(ProjectDir)\..\..\..\..\Reaqtive\Core\Reaqtive.Linq\bin\$(Configuration)\net472\Reaqtive.Linq.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Runtime.CompilerServices" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".cs" #>
using System;

namespace Reaqtor.Shebang.Client
{
    public partial class ClientContext
    {
<#
var toCSharp = default(Func<Type, string>);
toCSharp = t =>
{
    if (t == typeof(int))
        return "int";
    else if (t == typeof(long))
        return "long";
    else if (t == typeof(short))
        return "short";
    else if (t == typeof(byte))
        return "byte";
    else if (t == typeof(uint))
        return "uint";
    else if (t == typeof(ulong))
        return "ulong";
    else if (t == typeof(ushort))
        return "ushort";
    else if (t == typeof(sbyte))
        return "sbyte";
    else if (t == typeof(float))
        return "float";
    else if (t == typeof(double))
        return "double";
    else if (t == typeof(decimal))
        return "decimal";
    else if (t == typeof(bool))
        return "bool";
    else if (t == typeof(string))
        return "string";
    else if (t == typeof(char))
        return "char";
    else if (t == typeof(object))
        return "object";
    else
    {
        if (t.IsGenericType)
        {
            if (t.IsGenericTypeDefinition)
            {
                return t.Name.Substring(0, t.Name.LastIndexOf('`'));
            }
            else
            {
                var d = t.GetGenericTypeDefinition();
                if (d == typeof(Nullable<>))
                {
                    var n = toCSharp(t.GetGenericArguments()[0]);
                    return n + "?";
                }

                var dn = toCSharp(d);
                return dn + "<" + string.Join(", ", t.GetGenericArguments().Select(toCSharp)) + ">";
            }
        }
        else if (t.IsArray)
        {
            var e = toCSharp(t.GetElementType());
            var r = t.GetArrayRank();
            var rank = r == 1 ? "" : new string(',', r - 1);
            return e + "[" + rank + "]";
        }
        else if (t.IsGenericParameter)
        {
            return t.Name;
        }
        else
        {
            return t.Name;
        }
    }
};

var toQuoted = new Func<Type, string>(t =>
{
    if (typeof(Delegate).IsAssignableFrom(t))
    {
        t = typeof(Expression<>).MakeGenericType(t);
    }
    return toCSharp(t).Replace("ISubscribable", "IAsyncReactiveQbservable").Replace("IGroupedSubscribable", "IAsyncReactiveGroupedQbservable");
});

var toQuotedShallow = new Func<Type, string>(t =>
{
    var name = toCSharp(t);

    if (name.StartsWith("ISubscribable"))
    {
        name = "IAsyncReactiveQbservable" + name.Substring("ISubscribable".Length);
    }

    if (name.StartsWith("IGroupedSubscribable"))
    {
        name = "IAsyncReactiveGroupedQbservable" + name.Substring("IGroupedSubscribable".Length);
    }

    return name;
});

var methods = typeof(Reaqtive.Subscribable).GetMethods(BindingFlags.Public | BindingFlags.Static).Where(m => !m.IsDefined(typeof(ExtensionAttribute))).Where(m => m.Name != "ToSubscribable" && !(m.Name == "CombineLatest" && m.GetGenericArguments().Length > 8)).OrderBy(m => m.Name).ThenBy(m => m.GetParameters().Length);

var uris = new HashSet<string>();

var all = new List<KeyValuePair<string, MethodInfo>>();

foreach (var method in methods)
{
    var parameters = method.GetParameters();
    var retElementType = method.ReturnType.GetGenericArguments()[0];

    var name = method.Name.ToLower();
    var uri = "rx://observable/" + name;

    if (method.Name == "Merge")
    {
        uri += "/N";

        // NB: Skipping for now; see QueryOperators.tt on the service-side for rationale.
        continue;
    }

    if (method.Name == "Timer")
    {
        if (parameters.Length == 1)
        {
            uri += "/single";
        }
        else
        {
            uri += "/period";
        }

        if (parameters[0].ParameterType == typeof(TimeSpan))
        {
            uri += "/relative";
        }
        else
        {
            uri += "/absolute";
        }
    }

    if (!uris.Add(uri))
    {
        throw new Exception("Conflict for " + uri);
    }

    all.Add(new KeyValuePair<string, MethodInfo>(uri, method));
}

foreach (var kv in all)
{
    var uri = kv.Key;
    var method = kv.Value;

    var parameters = method.GetParameters();
    var retElementType = method.ReturnType.GetGenericArguments()[0];

    var gen = method.IsGenericMethod ? "<" + string.Join(", ", method.GetGenericArguments().Select(t => toCSharp(t))) + ">" : "";
    var ret = toQuoted(method.ReturnType);

    var pars = string.Join(", ", parameters.Select(p => toQuoted(p.ParameterType) + " " + p.Name));
    var invoke = "";

    if (parameters.Length > 0)
    {
        invoke = "(" + string.Join(", ", parameters.Select(p => p.Name)) + ")";
    }

    var getArgs = string.Join(", ", parameters.Select(p => p.ParameterType).Concat(new[] { retElementType }).Select(t => toQuoted(t)));
#>
        [KnownResource("<#=uri#>")]
        public <#=ret#> <#=method.Name#><#=gen#>(<#=pars#>) => GetObservable<<#=getArgs#>>(new Uri("<#=uri#>"))<#=invoke#>;

<#
}
#>
    }
}
