<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#var highestSupportedArity = 15;#>
<#var ordinals = new string[] { "Zeroth", "First", "Second", "Third", "Fourth", "Fifth", "Sixth", "Seventh", "Eighth", "Ninth", "Tenth", "Eleventh", "Twelfth", "Thirteenth", "Fourteenth", "Fifteenth" };#>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT License.
// See the LICENSE file in the project root for more information.

//
// Revision history:
//
// BD - February 2016 - Created this file.
// Auto-generated file, changes to source may be lost
//

using System;
using System.Threading;
using System.Threading.Tasks;

namespace Reaqtor
{
    /// <summary>
    /// Provides a set of extension methods for IAsyncSubscriptionFactory and IAsyncSubscriptionFactory&lt;TArgs&gt;.
    /// </summary>
    public static partial class AsyncReactiveSubscriptionFactoryExtensions
    {
        #region CreateAsync

<#/*
generating the code for:

        /// <summary>
        /// Creates a new subscription with the specified subscription URI.
        /// </summary>
        /// <typeparam name="TArg1">Type of the first parameter passed to the subscription factory.</typeparam>
        /// <typeparam name="TArg2">Type of the second parameter passed to the subscription factory.</typeparam>
        /// </summary>
        /// <param name="subscriptionFactory">Factory used to create the subscription.</param>
        /// <param name="subscriptionUri">URI identifying the subscription.</param>
        /// <param name="arg1">First parameter to pass to the subscription factory.</param>
        /// <param name="arg2">Second parameter to pass to the subscription factory.</param>
        /// <param name="state">Additional metadata to associate with the artifact. Implementations can interpret this value, or ignore it.</param>
        /// <returns>Task returning a subscription object that can be used to send and receive data on the subscription, or an exception if the creation request was unsuccessful.</returns>
        public static Task<IAsyncReactiveSubscription> CreateAsync<TArg1, TArg2>(this IAsyncReactiveSubscriptionFactory<TArg1, TArg2> subscriptionFactory, Uri subscriptionUri, TArg1 arg1, TArg2 arg2, object state = null)
        {
            if (subscriptionFactory == null)
                throw new ArgumentNullException(nameof(subscriptionFactory));
            if (subscriptionUri == null)
                throw new ArgumentNullException(nameof(subscriptionUri));

            return subscriptionFactory.CreateAsync(subscriptionUri, arg1, arg2, state, CancellationToken.None);
        }

*/#>
<#
for (int i = 2; i<=highestSupportedArity; i++) { 
    var typeArgsList = new List<string>();
    var argsList = new List<string>();
    var paramsList = new List<string>();

    for (int j = 1; j<=i; j++)  
    {
        typeArgsList.Add(string.Format("TArg{0}", j));
        argsList.Add(string.Format("arg{0}", j));
        paramsList.Add(string.Format("TArg{0} arg{0}", j));
    }

    var typeArgs = string.Join(", ", typeArgsList.ToArray());
    var arguments = string.Join(", ", argsList.ToArray());
    var parameters = string.Join(", ", paramsList.ToArray());
#>
        /// <summary>
        /// Creates a new subscription with the specified subscription URI.
        /// </summary>
<#
for (int j = 1; j<=i; j++)  
    {
#>
        <#=string.Format("/// <typeparam name=\"TArg{0}\">Type of the {1} parameter passed to the subscription factory.</typeparam>", j, ordinals[j].ToLower())#>
<#}#>
        /// <param name="subscriptionFactory">Factory used to create the subscription.</param>
        /// <param name="subscriptionUri">URI identifying the subscription.</param>
<#
for (int j = 1; j<=i; j++)  
    {
#>
        <#=string.Format("/// <param name=\"arg{0}\">{1} parameter to pass to the subscription factory.</param>", j, ordinals[j])#>
<#}#>
        /// <param name="state">Additional metadata to associate with the artifact. Implementations can interpret this value, or ignore it.</param>
        public static Task<IAsyncReactiveSubscription> CreateAsync<<#=typeArgs#>>(this IAsyncReactiveSubscriptionFactory<<#=typeArgs#>> subscriptionFactory, Uri subscriptionUri, <#=parameters#>, object state = null)
        {
            if (subscriptionFactory == null)
                throw new ArgumentNullException(nameof(subscriptionFactory));
            if (subscriptionUri == null)
                throw new ArgumentNullException(nameof(subscriptionUri));

            return subscriptionFactory.CreateAsync(subscriptionUri, <#=arguments#>, state, CancellationToken.None);
        }

<#}#>
        #endregion
    }
}