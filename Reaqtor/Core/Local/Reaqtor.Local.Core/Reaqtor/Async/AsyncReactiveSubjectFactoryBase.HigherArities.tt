// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT License.
// See the LICENSE file in the project root for more information.

//
// Revision history:
//
// BD, ER - August 2013 - Created this file.
// Auto-generated file, changes to source may be lost
//

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#var highestSupportedArity = 15;#>
<#var ordinals = new string[] { "Zeroth", "First", "Second", "Third", "Fourth", "Fifth", "Sixth", "Seventh", "Eighth", "Ninth", "Tenth", "Eleventh", "Twelfth", "Thirteenth", "Fourteenth", "Fifteenth" };#>
using System;
using System.Threading;
using System.Threading.Tasks;

namespace Reaqtor
{
<#
for (int i = 2; i<=highestSupportedArity; i++) {
    var typeArgsList = new List<string>();
    var argsList = new List<string>();
    var paramsList = new List<string>();

    for (int j = 1; j <= i; j++)
    {
        typeArgsList.Add(string.Format("TArg{0}", j));
        argsList.Add(string.Format("arg{0}", j));
        paramsList.Add(string.Format("TArg{0} arg{0}", j));
    }

    var typeArgs = string.Join(", ", typeArgsList.ToArray());
    var arguments = string.Join(", ", argsList.ToArray());
    var parameters = string.Join(", ", paramsList.ToArray());
#>
    /// <summary>
    /// Base class for stream factories.
    /// </summary>
    /// <typeparam name="TInput">Type of the data received by the subjects created by the stream factory.</typeparam>
    /// <typeparam name="TOutput">Type of the data produced by the subjects created by the stream factory.</typeparam>
<#
for (int j = 1; j <= i; j++) {
#>
    <#=string.Format("/// <typeparam name=\"TArg{0}\">Type of the {1} parameter passed to the subject factory.</typeparam>", j, ordinals[j].ToLower())#>
<#}#>
    public abstract class AsyncReactiveSubjectFactoryBase<TInput, TOutput, <#=typeArgs#>> : IAsyncReactiveSubjectFactory<TInput, TOutput, <#=typeArgs#>>
    {
        #region CreateAsync

        /// <summary>
        /// Creates a new subject with the specified stream URI.
        /// </summary>
        /// <param name="streamUri">URI identifying the stream.</param>
<#
for (int j = 1; j <= i; j++) {
#>
        <#=string.Format("/// <param name=\"arg{0}\">{1} parameter to pass to the subject factory.</param>", j, ordinals[j])#>
<#}#>
        /// <param name="state">Additional metadata to associate with the artifact. Implementations can interpret this value, or ignore it.</param>
        /// <param name="token">Token to observe for cancellation of the request.</param>
        /// <returns>Task returning a subject object that can be used to send and receive data on the stream, or an exception if the creation request was unsuccessful.</returns>
        public Task<IAsyncReactiveSubject<TInput, TOutput>> CreateAsync(Uri streamUri, <#=parameters#>, object state = null, CancellationToken token = default)
        {
            if (streamUri == null)
                throw new ArgumentNullException(nameof(streamUri));

            return CreateAsyncCore(streamUri, <#=arguments#>, state, token);
        }

        /// <summary>
        /// Creates a new subject with the specified stream URI.
        /// </summary>
        /// <param name="streamUri">URI identifying the stream.</param>
<#
for (int j = 1; j <= i; j++) {
#>
        <#=string.Format("/// <param name=\"arg{0}\">{1} parameter to pass to the subject factory.</param>", j, ordinals[j])#>
<#}#>
        /// <param name="state">Additional metadata to associate with the artifact. Implementations can interpret this value, or ignore it.</param>
        /// <param name="token">Token to observe for cancellation of the request.</param>
        /// <returns>Task returning a subject object that can be used to send and receive data on the stream, or an exception if the creation request was unsuccessful.</returns>
        protected abstract Task<IAsyncReactiveSubject<TInput, TOutput>> CreateAsyncCore(Uri streamUri, <#=parameters#>, object state, CancellationToken token);

        #endregion
    }

<#
}
#>
}
