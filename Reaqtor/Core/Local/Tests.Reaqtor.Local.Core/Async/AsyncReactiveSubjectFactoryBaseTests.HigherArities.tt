// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT License.
// See the LICENSE file in the project root for more information.

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#var highestSupportedArity = 15;#>
<#var ordinals = new string[] { "Zeroth", "First", "Second", "Third", "Fourth", "Fifth", "Sixth", "Seventh", "Eighth", "Ninth", "Tenth", "Eleventh", "Twelfth", "Thirteenth", "Fourteenth", "Fifteenth" };#>
using System;
using System.Threading;
using System.Threading.Tasks;

using Reaqtor;

using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Tests
{
    [TestClass]
    public class AsyncReactiveSubjectFactoryBaseTests
    {
<#
for (int i = 2; i<=highestSupportedArity; i++) {
    var typeArgsList = new List<string>();
    var argsList = new List<string>();
    var paramsList = new List<string>();

    for (int j = 1; j <= i; j++)
    {
        typeArgsList.Add(string.Format("TArg{0}", j));
        argsList.Add(string.Format("arg{0}", j));
        paramsList.Add(string.Format("TArg{0} arg{0}", j));
    }

    var typeArgs = string.Join(", ", typeArgsList.ToArray());
    var arguments = string.Join(", ", argsList.ToArray());
    var parameters = string.Join(", ", paramsList.ToArray());

    var genArgs = string.Join(", ", Enumerable.Repeat("int", i));
    var args = string.Join(", ", Enumerable.Range(1, i).Select(j => j.ToString()));
#>
        [TestMethod]
        public void AsyncReactiveSubjectFactoryBase<#=i#>_ArgumentChecking()
        {
            var s = new MyAsyncReactiveSubjectFactory<int, int, <#=genArgs#>>();

            Assert.ThrowsException<ArgumentNullException>(() => s.CreateAsync(null, <#=args#>, new object()).Wait());
        }

        [TestMethod]
        public void AsyncReactiveSubjectFactoryBase<#=i#>_Create()
        {
            var s = new MyAsyncReactiveSubjectFactory<int, int, <#=genArgs#>>();

            var uri = new Uri("bar://foo");
            var stateObj = new object();

            s.CreateAsyncImpl = (streamUri, <#=arguments#>, state, token) =>
            {
                Assert.AreEqual(uri, streamUri);
<#
    for (int j = 1; j <= i; j++)
    {
#>
                Assert.AreEqual(<#=j#>, arg<#=j#>);
<#
    }
#>
                Assert.AreSame(stateObj, state);

                return Task.FromResult<IAsyncReactiveSubject<int, int>>(null);
            };

            _ = s.CreateAsync(uri, <#=args#>, stateObj).Result;
        }

        private delegate Task<IAsyncReactiveSubject<TInput, TOutput>> CreateAsync<TInput, TOutput, <#=typeArgs#>>(Uri streamUri, <#=parameters#>, object state, CancellationToken token);

        private sealed class MyAsyncReactiveSubjectFactory<TInput, TOutput, <#=typeArgs#>> : AsyncReactiveSubjectFactoryBase<TInput, TOutput, <#=typeArgs#>>
        {
            public CreateAsync<TInput, TOutput, <#=typeArgs#>> CreateAsyncImpl;

            protected override Task<IAsyncReactiveSubject<TInput, TOutput>> CreateAsyncCore(Uri streamUri, <#=parameters#>, object state, CancellationToken token) => CreateAsyncImpl(streamUri, <#=arguments#>, state, token);
        }

<#
}
#>
    }
}
